Advanced network configuration 
------------------------------

RiscOS AUN clients present a challenge.  They will only talk on port 32768
(both source and destination) and the station ID maps to the IP address.  So if
your network was 192.168.0.0/24 then station 254 would be on 192.168.0.254 port
32768.  This introduces a challenge for the Bridge because only one service can
listen to port 32768 at a time.

The bridge supports an alternate network mode where we define a whole subnet on
the Raspberry Pi, and then the clients need to have their IP routing tables
updated to be able to reach this network.


Setting up the Raspberry Pi 
--------------------------- 

In these examples, the IP address of the Pi on the network is 10.0.0.178.

We will create a new network, 192.168.140.0/24 that is local to the Pi.

This can be done in /etc/rc.local so it is created at boot time.  It needs to
be done _before_ the bridge code starts.

    BASE=192.168.140 INT=lo

    for a in {2..254} do ip address add $BASE.$a/24 dev $INT done

You can verify these addresses exist

$ ip -4 addr | head 
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    inet 127.0.0.1/8 scope host lo 
       valid_lft forever preferred_lft forever 
    inet 192.168.140.2/24 scope global lo
        valid_lft forever preferred_lft forever 
    inet 192.168.140.3/24 scope global secondary lo 
        valid_lft forever preferred_lft forever 
    inet 192.168.140.4/24 scope global secondary lo 
        valid_lft forever preferred_lft forever 
    inet 192.168.140.5/24 scope global secondary lo

And we can pick one:

$ ping -c 1 192.168.140.55 PING 192.168.140.55 (192.168.140.55) 56(84) bytes of data.  
64 bytes from 192.168.140.55: icmp_seq=1 ttl=64 time=0.088 ms

--- 192.168.140.55 ping statistics --- 
1 packets transmitted, 1 received, 0% packet loss, time 0ms 
rtt min/avg/max/mdev = 0.088/0.088/0.088/0.000 ms


Configuring RiscOS 
------------------

RiscOS needs to told how to send traffic to this network.  This step must be
completed before it can talk to the bridge.

We use the *route command

    *route add -net 192.168.140.0/24 10.0.0.178

(recall that in this example 10.0.0.178 is the Pi's IP address on the network).

You can verify the RiscOS machine can talk to the private network with *ping

    *ping -c 1 192.168.140.55 
    PING 192.168.140.55 (192.168.140.55) 56(84) bytes of data.  
    64 bytes from 192.168.140.55: icmp_seq=0 ttl=64 time=22.000 ms

    --- 192.168.140.55 ping statistics --- 
    1 packets transmitted, 1 packets received, 0% packet loss 
    route-trip min/avg/max = 22.000/22.000/22.000 ms

This route command can be made permanent by adding it to the "Routes" file (via
!Configure / Network / Internet / Routing).

We now need to configure AUN for this network. Modify the AUNMap file
(!Configure / Network / Econet ) to add a line such as:

    AddMap 192.168.140.0 140

This will tell RiscOS that traffic for network 140 will be sent to the private
network.  Thus station 140.254 would be on 192.168.140.254


Configuring Windows (for BeebEm) 
--------------------------------

BeebEm Econet AUN uses the host Operating System (typically Windows) to route
the IP traffic, so the Windows host needs to be told how to reach this network:

    C:\>route -p add 192.168.140.0 mask 255.255.255.0 10.0.0.178

The "-p" option makes this change persistent over reboots

Again we can verify it works:

    C:\>ping 192.168.140.55

    Pinging 192.168.140.55 with 32 bytes of data:

    Reply from 192.168.140.55: bytes=32 time=6ms TTL=64 
    Reply from 192.168.140.55: bytes=32 time=2ms TTL=64 
    Reply from 192.168.140.55: bytes=32 time=2ms TTL=64 
    Reply from 192.168.140.55: bytes=32 time=2ms TTL=64

    Ping statistics for 192.168.140.55: 
        Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), 
    Approximate round trip times in milli-seconds: 
        Minimum = 2ms, Maximum = 6ms, Average = 3ms


Configuring Linux (for BeebEm/Wine/rpcemu/etc etc)
--------------------------------------------------

Unfortunately this very much depends on the operating system.  The simple
command would be something like

    # route add -net 192.168.140.0/24 gw 10.0.0.178

However to make this persistent depends on a lot of features (eg are you using
NetworkManager, or RedHat, or Debian... and the version!)

For Network manager the following might help:

    $ nmcli con edit "Wired connection 1"

    ===| nmcli interactive connection editor |===

    Editing existing '802-3-ethernet' connection: 'Wired connection 1'

    Type 'help' or '?' for available commands.  
    Type 'print' to show all the connection properties.  
    Type 'describe [<setting>.<prop>]' for detailed property description.

    You may edit the following settings: 

    connection, 802-3-ethernet (ethernet), 802-1x, dcb, sriov, ethtool, 
    match, ipv4, ipv6, tc, proxy 

    nmcli> set ipv4.routes 192.168.140.0/24 10.0.0.178 
    nmcli> save persistent 
    Connection 'Wired connection 1' (54de4fd4-a7e2-494b-a6bd-dd37e818773f) successfully
updated.  
    nmcli> print ipv4.routes ipv4.routes: { ip = 192.168.140.0/24, nh = 10.0.0.178 } 
    nmcli> quit

From the command line you can see current routes:

    % netstat -rn
    Kernel IP routing table 
    Destination     Gateway         Genmask       Flags   MSS Window  irtt Iface 
    0.0.0.0         10.0.0.1        0.0.0.0       UG        0 0          0 enp2s0 
    10.0.0.0        0.0.0.0         255.255.255.0 U         0 0          0 enp2s0 
    169.254.0.0     0.0.0.0         255.255.0.0   U         0 0          0 enp2s0 
    192.168.140.0   10.0.0.178      255.255.255.0 UG        0 0          0 enp2s0

And, of course

    % ping -c 1 192.168.140.55
    PING 192.168.140.55 (192.168.140.55) 56(84) bytes of data.  
    64 bytes from 192.168.140.55: icmp_seq=1 ttl=64 time=1.67 ms

    --- 192.168.140.55 ping statistics --- 
    1 packets transmitted, 1 received, 0% packet loss, 
    time 0ms rtt min/avg/max/mdev = 1.674/1.674/1.674/0.000 ms


Configuring BeebEm 
------------------ 

BeebEm needs to be told about the hosts it can talk to.  We can pretend they're
all on the local network and not need to worry about AUNMap.

This is defined in Econet.cfg (typically in My Documents\BeebEm).

e.g

    AUNMODE 1 
    LEARN 0 
    AUNSTRICT 0  
    SINGLESOCKET 1 
    MASSAGENETS 1 
    FLAGFILLTIMEOUT 500000 
    SCACKTIMEOUT 500 
    TIMEBETWEENBYTES 128 
    FOURWAYTIMEOUT 500000

    # My host is 10.0.0.141 so I have this entry
    0 141 10.0.0.141 32768

    # These are remote hosts BeebEm can talk to, all configured on the Bridge
    0 235 192.168.140.235 32768 
    0 253 192.168.140.253 32768 
    0 254 192.168.140.254 32768


Bridge configuration (Finally!) 
-------------------------------

Now we have the network and clients configured, we need to set up the bridge.

To expose (via AUN) hosts which are either on the Econet wire or are reachable
by trunks or other bridges via ths Pi, we have to expose them over AUN. This is
done using the 'EXPOSE' command set in the HP Bridge's configuration.

E.g. to expose a whole network:

	EXPOSE NET 1 ON 172.17.1.0 PORT FIXED AUTO

This will expose host 1.1 on the Econet on IP address 172.17.1.1 on port 32768,
1.2 on 172.17.1.2, and so on. If you want to use a port number other than
32768, put that in the command line in place of 'AUTO' - however, RiscOS will
not talk to such hosts and that is only really useful with emulators like
BeebEm.

If you wish to use a single IP address (e.g. that of the bridge) to expose a
whole network, change the IP address from something ending in .0 to the IP
address you want to use, and then use the sequential port numbering option.
E.g. to expose Econet network 1 on 192.168.2.3 with ports 20001 for host 1,
20002 for host 2 etc.  use

	EXPOSE NET 1 on 192.168.2.3 PORT SEQ 20000

Again, however, because RiscOS wants to use port 32768, it won't talk to you
and this is only really useful for emulators.

If you want to use a default base port number of 10000 you can just put 'AUTO'
instead of the port number.


A concrete example 
------------------

Say we have:

 - A bridge whose eth0 IP address is 192.168.1.1
 - Set up IP addresses 192.168.140.1 up to 254 as described above
 - Our local Econet is network 1
 - There is an Acorn fileserver at station 253 on the Econet
 - We want to expose network 1 to AUN on the IP addresses just above
 - One of our machines is a RiscOS machine which only speaks AUN but we want it
   to be part of network 1 - let's say it's station 100 and it's on our local
   IP network which is 192.168.1.0, addressed as 192.168.1.100

Our econet-hpbridge.cfg will contain something like this:

-- snip -- 
WIRE NET 1 ON device /dev/econet-gpio 
EXPOSE NET 1 ON 192.168.140.0 PORT FIXED AUTO 
AUN MAP HOST 1.100 ON 192.168.1.100 PORT 32768 AUTOACK 
-- snip --

And on the RISC OS machine, I've implemented an AUN MAP in line with the above,
but routing 192.168.140.0/24 to my local bridge IP address of 192.168.1.1 (see
above) instead of the 10.x.x.x address in the earlier example. The RISC OS
machine will then see network 1 as network 140.

With this configuration running we can look at the ports the bridge listens on:

    $ sudo netstat -anp | grep econet | sort 
udp        0      0 192.168.140.1:32768   0.0.0.0:*   3075/./econet-hpbridg 
udp        0      0 192.168.140.2:32768   0.0.0.0:*   3075/./econet-hpbridg 
... etc.
	
From my RiscOS client I can login to the PiBridge server (station 254)

    *I AM 140.254 SYST

Or I can login to the Master 128 Fileserver (station 253)

    *I AM 140.253 SYST

