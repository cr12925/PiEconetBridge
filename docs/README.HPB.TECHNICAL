INTRODUCTION
------------

The HPB ('High Performance Bridge') is the second generation of utility in 
user space which manages the reception and redistribution / transmission
of Econet and AUN packets. It has an entirely different architecture and
configuration file from the earlier version ('econet-bridge.c'). However:

- It copes with the concept of more than one Econet wire/device. This is for
  future expansion.
- It interoperates with the earlier version across trunk connections
- It uses the same fileserver code, and so fileserver directories will work
  with both sets of code interchangeably.
- It incorporates the IP Gateway which was previously only available as
  a pipe-connected system. (The pipe-connected version will still work, since
  the HPB supports pipe connections just as did the old version).
- It is threaded for performance, with appropriate mutex locking.
- It supports Econet wire, Trunk, local emulation (file, print & IP servers),
  together with pipe connections and AUN remote hosts.
- It differs from the earlier version in that it is no longer mandatory to
  expose all hosts to AUN. This can now be done by network or individual host.
- It has a more readable configuration format (see other documentation).
- In particular, ALL configuration items use non-zero network numbers so that
  networks are better defined. The underlying code works out when packets
  should go to their destination with network number 0 in the source or
  destination. This can be seen by turning on the packet debugging with -p.
- It offers a choice, for remote AUN devices, of automatically ACKing all data
  packets which come in, OR waiting for an ACK to be generated by a destination
  station and for that to be forwarded back. (Traditional Econet devices have
  their ACKs and NAKs generated for them depending on whether traffic
  transmission to the Econet ultimately succeeded or failed afer a number
  of attempts.)
- The command line options are different and simpler (aka less bewildering).
- The output is more controllable, since the system has logging levels up to 5
  and will be silent if no logging is sought (i.e. -z command line option is
  absent). This applies also to the fileserver.
- Log output can be directed to a file instead of stderr.

INTERNAL STRUCTURE
------------------

The HPB models the network on devices. It knows about 3 key types of device
which can transmit traffic (theoretically), and a further 3 which exist only
as 'diverts' on one of the first tranche - i.e. they are stations which are
virtual in some way.

The 3 main types of device are as follows, and each is assigned a network
number in the configuration except for trunks (which learn which networks
are where using the bridge protocol):

A. Econet Wire.
B. AUN Trunk (to another HPB or earlier bridge instance)
C. NULL.

NULL does not, of itself, transmit or receive traffic. It exists only so that
stations can exist in a network number which has no physical transmission
medium. E.g. for a single fileserver which is not in the same network number
as the local Econet wire, emulated within the bridge, or for distant AUN
hosts (including hosts which are dynamically allocated a station number
inside the bridge when traffic is received).

Then there are the following types of device which can only exist in the form
of 'diverts'. A 'divert' means that a single station on a particular device
(Wire or Null only - not Trunks) is not on that device at all, but is somewhere
else. The types (which also serve as examples) are:

1. AUN remote host - e.g. a RISC OS machine or BeebEm.
2. A locally emulated server - e.g. a fileserver or printserver
3. A station connected by a named pipe in the Unix filesystem.

TRAFFIC MOVEMENT - OUTLINE
--------------------------

Each device has a separate thread which poll()s for traffic. When traffic is
available, it wakes up a 'despatcher' thread (again, one per device), which
reads the traffic.

Traffic is received from a device (be it an Econet wire or an AUN remote host
or anywhere else except a NULL device).

- If it is broadcast traffic, it is siphoned off into a broadcast handler
  which deals with (i) bridge announcements/queries locally, and (ii) sends
  anything else on all other devices and to all other hosts.

- Otherwise, it is moved under mutex lock to an outbound queue. The outbound
  queue is a linked list of dynamically allocated structures, held with a
  separate queue for each distinct destination station. This allows a queue
  of traffic for a station which has gone away to be dumped efficiently.

- The outbound, per station, queues are then transferred under mutex lock to 
  an 'inbound' queue for the destination device. The packet data is not copied,
  but instead the existing malloc()'d struct is moved as a pointer for 
  efficiency. (The exception is broadcasts, which at present have to be 
  duplicated - but there is a plan afoot to use a reference counter in future
  instead.)

- Having moved the traffic to an input queue, the despatcher for the device
  which received the traffic wakes up the despatcher for the device whose
  input queue has just been populated. That device then attempts to send the
  traffic by the correct means - viz. on a wire, via a trunk, to AUN etc.

- The despatcher threads handle all matters of network translation. 

- Re-transmission attempts are handled by the despatcher thread for the 
  appropriate device, which goes to sleep on a threaded condition wait for
  the applicable retransmission interval. Thus if, for example, the thread is
  sleeping for retransmission of an AUN packet (see below - this actually
  happens in the source device, not the destination device), and an ACK
  arrives, the AUN listener device will wake up the despatcher (having taken
  the packet to be re-transmitted off the output queue) so that more traffic
  can be sent immediately.

- When an Econet wire receives an immediate query, it will set a priority
  triple (source net, source station, sequence number) so that if a
  reply appears which matches the triple, it will be put on the head of the
  Econet input queue so that when the despatcher is woken, it sends the
  immediate reply before anything else. This is because the ADLC will,
  after receipt of the immediate query, be put into flag fill mode by
  the kernel, and thus a proper reply to the original station is sent.

- In this regard, if there is an immediate query received, but *no*
  reply ever arrives, the kernel can get stuck waiting for such a reply
  to transmit, possibly holding the wire in flag fill for some time.
  To resolve this, whenever an immediate request is received, the 
  bridge starts a timer thread which sleeps for a period and then
  checks the priority triple described above. If it is unchanged, then
  (under mutex lock) it will re-set the kernel module to 'read mode' so that
  further normal operation then continues.

Thus, for example, the delays which were previously incurred by the single-
threaded old bridge code when it tried (but failed) to transmit to the Econet
wire no longer hold up other traffic transmission which doesn't involve the
wire, thus (hopefully) increasing performance.

Each device will typically also have a listener thread which does nothing
except poll() for traffic and, if traffic becomes available, will wake up
the matching despatcher thread so that it can process it.

AUN-exposed hosts have a specific listener which works out what the source 
of the traffic was, and then puts it into the queueing system under mutex
lock.

TRANSMISSION DETAIL
-------------------

A. Econet wire. This uses a very similar transmission loop to write to the
   kernel as the old version did, but it is now running in a thread of its
   own and doesn't hold up other bridge activities. The HPB will, as the
   earlier version did, try each transmission a number of times before 
   giving up. When it gives up, it sends a NAK back to the source. The
   despatcher thread sleeps on a threaded condition wait for the re-transmit
   interval unless it gets woken up for some reason, thus hopefully saving
   CPU cycles.

   The bridge (predictably) filters out any ACK or NAK packets which are
   headed towards a destination on an Econet wire since they have no meaning
   in that context. (They also confuse the heck out of the kernel module
   at present.)

B. Trunk. These simply write traffic straight out to the trunk. They do not
   attempt to re-transmit - lack of ACK/NAK is dealt with between endpoint
   devices and the trunk will not make any attempt to see if its traffic 
   reached the other end of the trunk. It is transparent to all traffic 
   types - it does not, for example, track ACK / NAK or Immediate replies.
   In the future, it may be that a TCP-based trunk is implemented for
   enhanced reliability.

   Note that an AUN trunk is a PiBridge specific thing. Each packet has
   an extra four bytes preceding the normal AUN packet which contain source
   and destination network information, since AUN packets rely on IP address
   and port numbers to determine that, which is no use when you want to send
   traffic from multiple sources/destinations down the same communication
   line. This is also the extended format used for communications with the
   kernel module for a broadly similar reason: the kernel module deals in
   AUN format packets when the bridge code is in use (but not the network
   monitor code), and without the extra bytes it will have no idea what to
   put in the source/destination net/station bytes in a wire packet.

   Bridge advertisements are sent / received on trunks just as on Econet
   wires, and processed by the broadcast handler in the same way.
   
   There are (as yet unimplemented) hooks to allow a trunk to exist over
   a serial link (e.g. at authentically slow speed like 38400 baud, or
   perhaps faster at 115k2 baud), with potential for automatic dial up,
   and disconnection on idle. These are not yet in place.

C. Local emulation. All packets to locally emulated servers are 'transmitted'
   by feeding the packet to a well-defined handler function. The local
   servers have been adapted to use the eb_enqueue_...() functions to get
   their traffic back into the network (i.e. functions which put traffic
   into input/output queues under mutex lock). Since the old fileserver code
   is not very thread friendly (though, since it operates largely on a 
   per-server basis, it probably isn't bad), there is a mutex lock which
   covers all fileserver instances present in the same bridge, which 
   prevents any but one of them operating at the same time. This is likely
   to alter in the future.

D. Pipe clients. These talk to the bridge over Unix named pipes. They work
   exactly as they did under the old bridge userspace code, but now they
   have a despatcher / listener thread of their own. 

   Pipe clients have their ACKs and NAKs dealt with on their behalf by the
   HPB. It will drop all ACKs & NAKs heading to a Pipe, and will ACK all
   data traffic (except immediatees) heading the same way. This behaviour
   can be changed if someone optimistic wishes to manage their own ACK/NAK
   tracking in a pipe client, by specifying the 'DIRECT' flag in the
   configuration for a given pipe.

E. NULL / Virtual devices. These have no packet transmission or reception
   code of their own. The exist only so that a particular network number
   can exist and have 'diverted' stations (see above).

F. AUN remote hosts. These exist only as diverts. E.g.:
   
   Support net 1 is your Econet (wired). You want station 1.100 to be
   off the wire and be an AUN system (e.g. a RISC PC). When you define
   station 1.100 as an AUN system:

   - The bridge will cause the kernel module to listen for traffic to 1.100
   - Station 100 will be created as a 'divert' on the (wired) net 1.
   - When the bridge receives traffic (from anywhere) to 1.100 (or, if off
     the Econet, then 0.100), it will 'divert' it to the AUN remote host.
   - Such traffic does not go into the AUN input queue (as described above).
     Instead, it is transmitted by the outbound despatcher for the source
     device, directly from its output queue. This is to make it easier to
     track ACK/NAK packets coming from the AUN device, because they are
     received by an AUN listener *connected to the source of the original
     traffic* - so the packets are held in that source device's output queue
     and (re-)transmitted from there.
   - To transmit to an AUN device, it is necessary that the source device is
     'exposed' to AUN. It is no longer mandatory to expose all devices in
     that way - the config allows exposure of whole networks and single
     stations, with flexibility as to choice of port. See config manual.

  Thus, when (say) station 1.1 sends traffic to 1.100:

   - The kernel module picks up the traffic to 0.100 off the wire
   - It passes it to the userspace code where the Econet listener thread
     will detect it, and wake up the Econet despatcher thread, which reads
     the traffic and puts it on its output queue providing 1.1 is exposed to
     AUN.
   - The *Econet* despatcher then (re-)transmits it to the AUN device (whose
     details it finds in the 'divert' list). It does a threaded condition wait
     in between each attempt.
   - Meanwhile, if the remote AUN system sends an ACK or NAK, that will be
     received by the AUN listener for the exposed station (1.1). That listener
     will pass the traffic back into the network (and wake up the Econet
     despatcher in case there is more to send), but it will ALSO remove the
     original outbound packet from the head of the Econet output queue so that
     it is not transmitted again now that an ACK/NAK has turned up.
   - A 'NAK tolerance' is built into that process because some versions of 
     RISC OS do not open their receiving port before sending a command which
     requires traffic to be sent to that port, so they will send a NAK for the
     first transmission, but by the time the second transmission comes along,
     it will be open and the packet will be accepted. So the first 'n' NAKs
     are just ignored.

  Next, the bridge has a facility for AUN remote stations called 'AUTOACK'.
  When enabled, the bridge will immediately ACK any data traffic received
  from the particular station. This is primarily for BeebEm, which will
  retransmit an AUN packet for which it has not received an ACK or NAK in
  fairly short order - and it does so with an updated sequence number
  (probably because it is generating traffic every time the emulated Beeb
  tries a retransmission, and it is difficult for BeebEm to tell what is a
  retransmission and what is 'just another packet', since the former ought
  to go with the same sequence number, but the latter should have a new one!)

  When AUTOACK is set, the AUN listener will ACK data packets immediately, and
  the outbound depsatcher which sends to AUN devices will silently drop
  ACK & NAK packets before transmission.

AUN EXPOSURES
-------------

As above, before any non-AUN station can talk to an AUN station, it must be
'exposed' to AUN. This can be done host by host, or for a whole network. In
the latter case the coniguration allows the user to specify whether the
exposures are on sequential IP addresses or a single address, and whether
the port number for the non-AUN host is fixed (e.g. 32768 to talk to RISC OS)
or sequential. If 'AUTO' is specified then:

- For fixed ports, it will be 32768
- For sequential ports, it will be (10000 + (256 * net) + stn).

But in both cases the user can specifiy a different fixed, or starting, port
number.

Any traffic attempting to travel from a non-exposed host to an AUN host will
be dropped. The packet dump command line option (-p) can be used to see that
happening and/or debug whether it is.

Each AUN exposed station has a listener thread which listens for traffic,
deals with removing traffic from outbound queues that has been ACKd or NAKd,
and puts the traffic in the correct inbound device queue under mutex lock.

Exposures can be inactive to allow for the exposure of a host on a network
which is not defined but which may be learned from another bridge (wired or
on a trunk). Any exposure conigured for a non-existent network at configuration
time will be flagged inactive. If a network is learned via a bridge and there
are exposures for that network, they will then be activated. On a bridge 
reset, they will be deactivated again. Thus, unlikely the previous bridge code,
it is now possible to expose stations to AUN which are over a trunk, or 
which are beyond a distant wired Econet bridge. By way of example:

- Suppose your network looks like this:

  Station 0.1 (i.e. 1.1)
          ^ 
          |
          v
  Econet (wired) net 1 <--> PiBridgeA <-Trunk-> PiBridgeB <--> Econet (wired) 2
                                                                      ^
  AUN Host 64.1 <--> PiBridgeC <--> Econet (wired) 3 <-Acorn Bridge--|

- PiBridge C will advertise net 64 on Econet 3.
- The Acorn Bridge will pick that up and advertise it on Econet 2
- PiBridge B will pick up the Acorn Bridge advert and advertise it on the 
  trunk.
- PiBridge A will pick up that advert (for net 64) and broadcast it on
  Econet 1.
- Station 1.1 can now be exposed to AUN on PiBridge C even though net 1 is
  not initially known to that bridge. When PiBridge C learns of net 1, 
  it will activate the exposure for host 1.1, and traffic can then be sent
  to AUN Host 64.1.
- When PiBridge C gets a Bridge reset (e.g. over the wire or its trunk), it 
  will de-activate the exposure for 1.1. (If net 1 is then advertised
  afresh, as is quite likely), the exposure will be re-activated fairly
  quickly as a result.
- Reply traffic from 64.1 to 1.1 needs:
  - In the case of BeebEm, an appropriate entry pointing to Bridge 3 in the
    econet.cfg
  - In the case of RISC OS, an AUN Map entry and appropriate port 32768
    exposure on PiBridge C.

CR
June 2022
