ECONET(R) HIGH PERFORMANCE BRIDGE - VERSION 2.2 RELEASE NOTE

/*
  (c) 2024 Chris Royle This program is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or (at your
option) any later version.

    This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
with this program.  If not, see <https://www.gnu.org/licenses/>.

*/

RELEASE NOTES FOR V2.2
----------------------

- Fileserver restructured to be extensible, and a single thread per server
- Limit on number of fileservers supported removed
- Limit on number of logged on users and open files (at system level)
  removed. (Limit on maximum number of handles for a logged in user
  remains 30.)
- Fileserver now dynamically allocates memory instead of statically,
  which should save on RAM
- *FLOG has been removed in favour of *LOGOFF
- *PRIV will now take an expanded privilege parameter (see docs)
- *NEWUSER takes a new privilege parameter to set privileges at user
  creation time.
- *NETCONF/*NETCONFIG have been retired in favour of *FSCONFIG
- *FNLENGTH has been retired in favour of *FSCONFIG FNLENGTH <n>
- *FSDEFPERM has been retired in favour of *FSCONFIG DEFPERM <(D)perm>
- *NETCONF BIGHANDLE has been retired. The FS now determines how many
  handles a user can have based on their machine type / NFS version.
- The FS will now send larger data burst packets to Archimedes and
  RISC PC class machines, if it discovers one at login
- Human-readable output of FS Examine now pads filenames
  to 10, 40 or 80 characters depending on the length of the longest
  filename in the directory in question, in order to make output tidier.
  *INFO output modified similarly based on length of the one filename
  being returned.
- The previous, rather heavyweight, load dequeuer has been retired
  in favour of one which simply reads the relevant file on demand.
- Legacy configuration form is now internally converted to JSON
  and implemented from the JSON. The resulting JSON can be written
  to a file using a command line switch --json-config-write
- The bridge will look for /etc/econet-gpio/econet-hpbridge.{cfg,json}
  and will read the most recently modified. If the JSON is more
  recent, it will use that. Alternative config files (both
  legacy and JSON) can be specified with -c and -j respectively.
- Thus you can convert your legacy config to JSON using the
  switch above, and then save it as econet-hpbridge.json and
  unless you subsequently modify your legacy file (.cfg), the
  bridge will use the JSON version. 
- The JSON config is intended to facilitate web-based configuration
  of the HPB. When that is done, it will hopefully also be
  friendly to text-browsers such as lynx so as to provide
  an effect text-based config tool.
- The JSON config "general" key can have within it keys which
  reflect the long command line parameters so that those settings
  can be made semi-permanent without having to have them on the
  command line. 
- Each interface and device can have an inbound and outbound firewall
  chain associated with it to provide granular filtering. Inbound
  means from the device - e.g. received on a trunk or from a pipe. 
  Outbound is the converse. Inbound filters must be configured
  to filter traffic with network / station numbers as received, i.e.
  before any NAT or pooling. Outbound filters are the reverse - the
  matching is done prior to the undoing of any NAT etc. 
- MDFS tape interface implemented, with up to four drives by default
  (MDFS had one only). 
  Further tape management commands:
  (MDFS *TAPEINFO should work on currently selected tape - see *TAPESELECT)
  *TAPEMOUNT <tapename> [<drive no.>]
  *TAPEDISMOUNT <drive no.>
  *TAPESELECT <drive no.> -- Selects the drive to use if none specified,
                          either on cmd line or when using MDFS calls
  *TAPEFORMAT <tapename>
  *TAPEBACKUP <discname> <partition> [<drive no.>] -- Back up 
              FS disc "discname" onto partition nn of the tape in
              either the currently selected drive, or the specified
              drive.
- User quotas implemented. No quota is adjusted for System users.
  If a user has an unexpected quota (which may default to nil!),
  use the Acorn *SETFREE utility to set it to something else. THe
  utility takes a username and a number of bytes free in hex. E.g.
  *SETFREE CHRIS 1000 
  sets CHRIS's free space to 65,536 bytes irrespective of what the
  user presently has stored.

KNOWN ISSUES
------------

Using the "Fileserver shutdown" command, either in *FAST or through
the Fileserver Operations interface will crash the bridge. There
appears to be some heap corruption somewhere I have not yet 
tracked down.

If you have RISC OS files in your fileserver which have filenames
involving a hard space (character &A0) then they will need to be
renamed on the linux command line. The old fileserver used
the # character as a substiute for hard space, unnecessarily.
Support for this was removed in 2.2 to facilitate the tape
system believe it or not. I will try and come up with a way
of doing this 'en masse' for users.

Roadmap to v2.2
---------------

- Possible kernel change so that 4-way handshakes do not complete with a final
  ACK from the bridge until it has had an ACK from the distant machine. This
  will generate 'Net error' at the local site if the distant machine is not
  there, rather than 'Not listening', but the latter cannot be generated without
  collecting the data phase of the 4-way handshake, which is needed to build the
  AUN type packets used for AUN stations / trunks.

- Improve MDFS password file functionality, hopefully including writing to it.

- Trunk ports which support multiple endpoints, and IPv6. (Existing trunk
  ports will not be IPv6 enabled, only the ones which support multiple
  remote endpoints.)

- Handle AUN broadcasts received as IP broadcasts, and transmit same to local
  hosts. Redistribute AUN broadcasts to distant AUN hosts as a unicast packet.

- Dynamic AUN stations to use pool addresses instead of specific network

- JSON-based configuration & converter from existing to JSON. Intended to
  enable configuration by a web app.

- Pipe-based 'tap' interface into the bridge (read only) which relays
  all or selected traffic to a pipe in AUN-extended format. (Will never
  catch all wire traffic - only that which goes through the bridge.)

- Implement signals for increasing / decreasing debug (SIGUSR1/2?)

- Add facilities for E permission in FS (execute only)


RELEASE NOTES FOR V2.1 
----------------------

- Fileserver updates

  - supports long filenames - but will cause display problems for certain
    client machines depending on which FSOps the client uses

  - defaults to file handles with only 1 bit set for compatibility with NFS 3.
    Previous behaviour can be re-enabled if you are not using NFS 3 with
    *NETCONF (see below). Fileserver version string now starts "3 " to 
    indicate to 32bit clients that a limited number of file handles is
    available so that the "MANYHANDLES" option is now largely redundant.

    A future version will do what Level 4 FS does and do a Machine Peek
    query to a station at logon, and then provide more filehandles if
    the station is ANFS or 32 bit.

  - Changing a password to something in quotes now works properly

  - Allows a system user to change another user's password with *SETPASS (see
    below)

  - *RENAME now works if the fileserver storage area is mounted on an NFS
    share.

  - Translates '/' in Acorn filenames to '.' in the underlying filesystem

  - Allow system users in the FS to (i) change another user's OPT4/boot
    setting, and (ii) stop the user from changing it. See *SETOPT and
    *PRIV <user> <+/->O

  - Some *PRIV options can now be used with + or - modifiers to turn 
    on (+) or off (-)

  - *NOTIFY messages received by locally emulated machines now display at
    debug level 1

  - Command aliases *NETCONFIG (for *NETCONF) and *LOGOFF (for *FLOG)
    added

  - *FSDEFPERM added to set default file / directory permissions (two
    separate tunables)

  - Outbound databurst on *LOAD and FS Getbytes now waits for AUN ACKs.

  - Econet retry time increased to 25ms from development branch of 2.1
    so as to improve RISC OS Econet compatibility due to RISC OS
    'Not listening' bug

  - Added *BRIDGEVER to fileserver

  - Added FS Op &60 (96) to control fileserver and bridge from 
    client stations. See PIFS-v2.1-FSOP

- Kernel updates

  - Kernel module and the bridge supports all the immediate operations which in
    fact use a 4-way handshake (e.g. OSPROC, USRPROC, JSR).

  - Kernel now supports 64 bit operations, and uses the Linux kernel's own calls
    for accessing GPIO Clock and PWM function (for the ADLC clock and Network
    clock respectively). It continues to write directly to the GPIO hardware for
    speed, having attempted to use the official calls for that purpose without
    success.

- Core bridge functionality

  - The original userspace bridge utility has been removed. The HPB is now
    stable and has far better functionality.

  - Bridge now has pool address translation enabled to facilitate trunking of a
    significantly larger number of networks together where most stations are
    clients rather than servers

  - Bridge now implements a PiBridge-unique AUN type "INK" to signal when
    an immediate query is unroutable over a trunk, or the local wire station
    has done the immediate equivalent of "Not Listening" (i.e. line idle
    on tx of a two-way immedaite). This signals to a distant bridge that
    it can drop its flag fill on its local wire (where the sender of
    the immedaite it) so that the network can do something else. This
    considerably speeds up the operation of, for example, *STATIONS and
    !Machines.

  - Trunks whose DNS does not resolve now will not stop the bridge starting.
    The trunk will start but will send no traffic until DNS works. When
    the name of the far end of the trunk can be resolved, a debug message
    is output and the trunk will come into full operation.

  - New facilities for setting default directory & file permissions in
    each FS. See *FSDEFPERM. Fileservers with an existing configuration 
    file will adopt a default of WR/R for both directories and files for
    backward compatibility. Fileservers created for the first time will
    adopt WR/R for directories, and WR/ for files (to match Acorn servers).

  - New per-FS tuneable NETCONF 'ACORNDIR' which turns on and off the masking
    of WR/R bits on directories so that displays mirror those from Acorn
    servers when turned on. This also affects the permissions bytes sent in
    non-human-readable FS operations such as GetObjectAttributes. This can 
    be enabled and disabled 'live'. Note that if any permission other than
    WR/R is set (ignoring L and P/H bits), then the full permission will 
    be reported to the client in both human and non-human -readable forms.

- econet-isnets added

  - Pipe client utilities which uses the IsNets broadcast to identify which
    networks are known


Roadmap to v2.3
---------------

- Move to a threaded fileserver

- Implement loop detection system for trunks which
  - Sends a port &9C packet (with distinct ctrl byte) containing
    a random number
  - Detects if a packet with that random number comes back
  - Disables the device on which the packet reappeared as follows:
    - If a trunk, ignore all but bridge reset packets
    - If a wire, ignore all but bridge reset packets and
      access to local final destinations (emulation, pipe, 
      and AUN clients)
  - On a bridge reset, do a standard bridge reset and 
    enable all devices again, but immediately send the next 
    loop probe so that a device on the receiving end of that 
    loop probe will be disabled promptly promptly
  - Since a trunk going dead will trigger a bridge reset, this
    will work a bit like spanning tree and disable a loop
    interface, but if the bridge topology changes because a
    bridge resets or a link does down then a reset will get
    generated and the topology will sort itself out. That
    enables some redundancy in the network not possible in
    Acorn topologies.

CR
June 2024
