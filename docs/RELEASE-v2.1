ECONET(R) HIGH PERFORMANCE BRIDGE - VERSION 2.1 RELEASE NOTE

/*
  (c) 2024 Chris Royle This program is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or (at your
option) any later version.

    This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
with this program.  If not, see <https://www.gnu.org/licenses/>.

*/


RELEASE NOTES FOR V2.1 
----------------------

- Fileserver updates

  - supports long filenames - but will cause display problems for certain
    client machines depending on which FSOps the client uses

  - defaults to file handles with only 1 bit set for compatibility with NFS 3.
    Previous behaviour can be re-enabled if you are not using NFS 3 with
    *NETCONF (see below).

  - Changing a password to something in quotes now works properly

  - Allows a system user to change another user's password with *SETPASS (see
    below)

  - *RENAME now works if the fileserver storage area is mounted on an NFS
    share.

  - Translates '/' in Acorn filenames to '.' in the underlying filesystem


- Kernel updates

  - Kernel module and the bridge supports all the immediate operations which in
    fact use a 4-way handshake (e.g. OSPROC, USRPROC, JSR).

  - Kernel now supports 64 bit operations, and uses the Linux kernel's own calls
    for accessing GPIO Clock and PWM function (for the ADLC clock and Network
    clock respectively). It continues to write directly to the GPIO hardware for
    speed, having attempted to use the official calls for that purpose without
    success.

- Core bridge functionality

  - The original userspace bridge utility has been removed. The HPB is now
    stable and has far better functionality.

  - Bridge now has pool address translation enabled to facilitate trunking of a
    significantly larger number of networks together where most stations are
    clients rather than servers

- econet-isnets added

  - Pipe client utilities which uses the IsNets broadcast to identify which
    networks are known

Roadmap to v2.2 
---------------

- Possible kernel change so that 4-way handshakes do not complete with a final
  ACK from the bridge until it has had an ACK from the distant machine. This
  will generate 'Net error' at the local site if the distant machine is not
  there, rather than 'Not listening', but the latter cannot be generated without
  collecting the data phase of the 4-way handshake, which is needed to build the
  AUN type packets used for AUN stations / trunks.

- Improve MDFS password file functionality, hopefully including writing to it.

- Move to a threaded fileserver

- Trunk ports which support multiple endpoints, and IPv6. (Existing trunk
  ports will not be IPv6 enabled, only the ones which support multiple
  remote endpoints.)

- Handle AUN broadcasts received as IP broadcasts, and transmit same to local
  hosts. Redistribute AUN broadcasts to distant AUN hosts as a unicast packet.

- Dynamic AUN stations to use pool addresses instead of specific network

- Allow system users in the FS to (i) change another user's OPT4/boot
  setting, and (ii) stop the user from changing it

- JSON-based configuration & converter from existing to JSON. Intended to
  enable configuration by a web app.

- Pipe-based 'tap' interface into the bridge (read only) which relays
  all or selected traffic to a pipe in AUN-extended format. (Will never
  catch all wire traffic - only that which goes through the bridge.)

- Implement signals for increasing / decreasing debug (SIGUSR1/2?)

- Implement PiEconetBridge-specific AUN packet type "Immediate NAK"
  (INK) which is sent from a destination bridge to a source bridge
  when a 2-way immediate is received but the destination machine
  is locally accessible but doesn't respond. This will only work on
  Wire, Local and Pipe devices because the bridge cannot tell when
  an AUN destination isn't going to respond. The purpose is to 
  give as timeous indication as possible to the source bridge that
  the ultimate destination simply is not going to respond. That
  enables the source bridge to drop its pro-active flag fill 
  on receipt of an immediate request which presently will just
  time out after 1s (tunable).

- Make FS permissions mirror L3 plus extra directory permissions.
  Add NETCONF tunable to imply WR/r on all directories and 
  mask the visible display of the same (so unlocked directories
  simply appear as "D/" as they do in L3).

- Add facilities for E permission in FS (execute only)

- Implement loop detection system for trunks which
  - Sends a port &9C packet (with distinct ctrl byte) containing
    a random number
  - Detects if a packet with that random number comes back
  - Disables the device on which the packet reappeared as follows:
    - If a trunk, ignore all but bridge reset packets
    - If a wire, ignore all but bridge reset packets and
      access to local final destinations (emulation, pipe, 
      and AUN clients)
  - On a bridge reset, do a standard bridge reset and 
    enable all devices again, but immediately send the next 
    loop probe so that a device on the receiving end of that 
    loop probe will be disabled promptly promptly
  - Since a trunk going dead will trigger a bridge reset, this
    will work a bit like spanning tree and disable a loop
    interface, but if the bridge topology changes because a
    bridge resets or a link does down then a reset will get
    generated and the topology will sort itself out. That
    enables some redundancy in the network not possible in
    Acorn topologies.

CR
May 2024
