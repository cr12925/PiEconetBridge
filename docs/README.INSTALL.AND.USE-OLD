AUN to Econet Bridge
--------------------

/*
  (c) 2021 Chris Royle
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/

Prerequisites
-------------

The system will require:
	- Raspberry Pi 4B (I have not tested it on anything else, but it may work on a 3)
	- No other GPIO usage on the system
	- The hardware (see Hardware.pdf), which in turn requires a Master 128 Econet board
	- Your installation of PiOS having the kernel headers installed (see below)
	- A pre-existing functioning Econet (with clock) with a spare station port to connect to the hardware


WARNING - NO, REALLY, YOU SHOULD READ THIS!
-------------------------------------------

I was once told that the difference between a professional musician and an the amateur is that the amateur practices until
he gets the piece right; the professional practices until the piece simply will not go wrong.

On any basis, by analogy, this is amateur code.

This is work which I have produced with no real experience of either electronics, the 68B54 ADLC, or kernel module 
programming.

In particular, the following undesirable characteristics of this system should be noted. These are typically owing to a lack
of talent on my part. I well understand the desirability of fixing them all. If anyone with more talent than me wishes to have
a go, I would be genuinely very happy. Notwithstanding the list below, I am a huge fan of doing things the 'proper' way. It is a
matter of regret that I have not managed to do so. In particular:

	- It reads and writes directly from the GPIO hardware instead of using the kernel routines. I accept this
	  renders it less portable even within Raspberry Pi systems, though at least the Peripheral Base address is in
	  a #define!

	- It probably does not handle AUN ACK and NAK quite the way it should.

	- It does not use ..._probe to load the module when it probably ought to.

	- It does not use the Device Tree when it really should. I can only say that I tried for a very long time to work out
	  how to do that from a standing start, and I got a little way but became lost. I would be very pleased if anyone
	  can explain.

Whilst the bridge appears to be relatively reliable, e.g. for a realy BBC accessing a file or print server on an emulator
(e.g. BeebEm), and vice versa, there are some wrinkles which periodically crop up

	- Sometimes the AUN state machine in the kernel gets out of step - probably because of a lost packet. The solution
	  is to quit the bridge in userspace (see below) and remove & reinsert the kernel module.

	- I have had a couple of occasions where an Acorn fileserver has changed all directory permissions to "DL/" when using
	  the bridge, and even creates new directories with that permission, and will not allow a change back to DWR/ for 
	  example. I do not know whether this is something in the bridge, or something in the Level 3 FS.

	- Sometimes the kernel module gets stuck unable to transmit. Solution as for the AUN state machine.

It is some time since I saw a kernel crash with this module, but you should be alive to the prospect that it might happen. If you
use this on a production system that's doing something else, you have been warned!

Whilst almost everything I have tried from BeebEm seems to work with a real fileserver, there appears to be one exception: If I
run up BeebEm as a Master 128 and try to *SRLOAD a sideways ROM image from a real BBC fileserver, the BeebEm end just stops. I can
*LOAD the same file elsewhere into the BeebEm's emulated RAM, just not *SRLOAD into sideways RAM. At present I take the view this
may well be a BeebEm bug, but I don't know.

INSTALLATION
------------

1. Install your kernel headers. On PiOS that requires the following (prepended by 'sudo ' if you are not root):

	sudo apt install raspberrypi-kernel-headers

2. Get the distribution of the bridge code. It comes in three main sections: kernel module, utilities, configuration

3. Build the kernel module

	cd module
	make

4. Build the utilities

	cd utilities
	make

5. Edit the configuration file (sample in config/econet.cfg) and put it in /etc/econet-gpio/econet.cfg

	Note: If you want to put it elsewhere that's fine - just use the '-c' option when running econet-bridge (see below).

	(Neither the kernel module nor the other utilities use the configuration file.)

LOADING THE KERNEL MODULE
-------------------------

	cd module
	sudo insmod ./econet-gpio.ko

If you are not running the utilities are root, you should change the permissions on the newly arrived /dev/econet-gpio, e.g.:

	sudo chmod a+rw /dev/econet-gpio

A WORD ON THE KERNEL MODULE
---------------------------

The kernel module does two things:

	- First, it transmits and receives packets through the ADLC.
	- Second, it implements a state machine which does the 4-way handshake and converts data packets off the wire into AUN-style
	  packets. (Internally, and when communicating with the utilities, it adds an extra four bytes on the start of each 
	  packet which match those on an Econet frame to make it easier to work out where a packet is going, viz.
	  destination station, destination network, source station, source network (in that order).
	
	  Similarly, any packet delivered to the kernel module when it is in AUN mode must have those four extra bytes on it.

The AUN (4-way-handshake) mode is enabled when a 'station set' is delivered to the kernel module. The station set map tells the
module which stations it should handshake for, or otherwise capture traffic for (e.g. immediates, broadcasts). Only stations which
appear in the map (and there are macros to put stations in the map) will have their traffic forwarded to userspace when in AUN
mode.

If no station map is put into the kernel module after a reload or reset, the module will remain in non-AUN mode. In that mode, it
captures all packets off the wire, and does *no* 4-way handshake. It simply delivers raw packets through /dev/econet-gpio to 
userspace. This mode is not useful practically, but provides a means of doing network monitoring. Thus the 'econet-monitor' 
utilities does not upload a station map, so that the module remains in 'raw' mode.

The other thing to appreciate is that because a reply to an immediate query on the hardware econet has to be provided
faster than it possibly could be if the query were sent out over AUN/UDP, a reply collected, and then delivered to the wire,
the kernel module does the immediate replies for 'distant' and 'local' stations (as to which see below: they're the ones which are
not physically attached to the Econet wire itself). It responds only to a selection. In fact, in AUN only 'Machine Peek' is 
implemented in the real world. However, the kernel module will respond to a MachinePeek with machine type &EEEE (unusued in the
current list) and version 0.1. It will 'sink' continues and halts by acknowledging them on the wire, but will ignore all other
types of immediate (e.g. memory peek, memory poke, JSR, User subroutine call etc.).

Thus if, on a real BBC on the Econet, you run a BASIC programme which does a Machine Peek to an AUN station elsewhere, you will
(falsely) be told is it machine type &EEEE running version 0.1 of the network software. In the future, it may be possible to
make the bridge code in userspace collect all the Machine Peek responses from stations it knows about, and feed them to the 
kernel module to respond by proxy. It is probably unnecessary, and I haven't done it yet.

TESTING - HARDWARE
------------------

If, like me, you've built the hardware on a breadbaord, you should probably test it before trying to use it. 

There is a utility 'econet-test' which puts the hardware through a test routine whose results will require an oscilloscope
to see. Essentially it toggles the various address, control and data lines onto the 68B54 ADLC.

To use it, you must first load the kernel module since the kernel module does the heavy lifting in this regard. See above.

To run the tests:

	cd utilities
	./econet-test

You will see a series of prompts which tell you which lines have been set and in what way so that they can be checked with
the scope. Press return or some other key after each one to move to the next.

It is *not* recommended you do this with the Econet actually connected to the module until the very last step.

The last stage is that the test harness will repeatedly use a kernel ioctl() to send a test packet onto the Econet. You will
therefore need to put your scope on the Data+ and Ground pins on the Econet connector itself to see if the packet is transmitted.
Note you will need a clock - the chip will not transmit otherwise.

The test packet is a 'machine peek' immediate query from 0.254 to 0.1. If station 0.1 is alive on your particular network, it
should reply and you should see two packets in quick succession on the scope. If not, you should just see one (the test packet
itself). 

This last test phase repeats until you press Q and then Enter (case sensitive) so that you can test repeated transmissions.

If there is a problem, watching the kernel ring buffer (dmesg -we) may give you a clue why.

THE UTILITIES
-------------

These run from simple to more complex. Each responds to -h on the command line to give you help.

econet-monitor
--------------

First, econet-monitor. This reads /dec/econet-gpio with the kernel module in raw mode and simply dumps every packet it sees.

You should see streams of packets (on an active network) which will include all four packets (separately) of the four-way
handshakes. This utilities does *not* glue them together into one line like Acorn's own NETMON. You literally see what's on the 
wire.

The output is verbose by default. You can get a one-line-per-packet (ish) output by specifying '-b' (brief) on the command line.

One easy way to see some traffic is to run the monitor on a live econet and press BREAK on a real BBC with the network software
loaded. Certainly on a Master (which is all I have), the ANFS will send 9 bridge queries out. These are short broadcasts whose
packet data includes the word 'BRIDGE' and you should see them appear on the monitor screen.

econet-imm
----------

This utility performs various sorts of 'immediate' queries on the econet. It leaves the kernel in raw mode, sends the query and
reads the next packet off the wire and (save for the continue and halt operations) tells you what was in it.

It implements the following operations: Halt, Continue, Machine Peek, Memory Peek.

In every case you *must* provide a source and destination station number. They will both be treated as being on net 0 for the
purposes of this utility, so only local stations can be queried (i.e. not those over traditional Econet bridges). Obviously
your own source station number should not already be in use on the network.

Examples (but see help for detail) with example output:

Send machine peek to station 1 from station 250

$ ./econet-imm -s 1 -d 250 -m
Station reports being a BBC Master 128 OS 3, NFS version 4.25.
$

Send HALT to station 1 from station 250

$ ./econet-imm -s 1 -d 250 -j
$

Send CONTINUE to station 1 from station 250

$ ./econet-imm -s  1 -d 250 -c
$

Send memory peak to station 1 from station 250 for addresses &2000 to &21FF

$ ./econet-imm -s 1 -d 250 -p -q 2000 -r 21FF
Remote memory peek received:
00002000 78 56 34 12 d0 04 a9 d4 d0 18 18 20 c3 20 20 3a 21 20 48 21 d0 0c 20 0f 22 d0 07 20 7a 22 d0 02 xV4........ .  :! H!.. .".. z"..
00002020 a9 00 48 a0 04 ad 6b 8c 91 b0 c8 ad 6c 8c 91 b0 c8 ad 72 8c 91 b0 68 4c 60 18 20 7d 1a a0 06 b1 ..H...k.....l.....r...hL`. }....
00002040 b0 20 4c 11 d0 0f 20 8d 1d d0 0a a0 09 b1 46 29 02 d0 04 a9 c1 d0 69 38 20 c3 20 ad 72 8c f0 3c . L... .......F)......i8 . .r..<
00002060 18 a0 00 b1 7c a0 09 71 b0 8d 6f 8c c8 b1 b0 a0 01 71 7c 8d 70 8c c8 b1 7c 69 00 8d 71 8c 18 a9 ....|..q..o......q|.p...|i..q...
00002080 ff 6d 6f 8c a9 04 6d 70 8c 8d 70 8c a9 00 8d 6f 8c 6d 71 8c 8d 71 8c 20 25 1d d0 24 a0 09 b1 b0 .mo...mp..p....o.mq..q. %..$....
000020a0 8d 6d 8c c8 b1 b0 8d 6e 8c 20 3a 21 20 7f 21 d0 0f 20 13 22 d0 0a 20 a8 22 d0 05 20 b0 23 a9 00 .m.....n. :! .!.. .".. .".. .#..
000020c0 4c 60 18 a9 00 8d 72 8c a0 09 b0 03 a0 06 38 b1 7c c8 8c 66 8c a0 00 f1 7c 8d 6d 8c ac 66 8c b1 L`....r.......8.|..f....|.m..f..
000020e0 7c a0 01 f1 7c 8d 6e 8c ee 66 8c ac 66 8c b1 7c a0 02 f1 7c b0 08 a9 00 8d 6d 8c 8d 6e 8c d0 18 |...|.n..f..f..|...|.....m..n...
00002100 38 ad 6d 8c a0 09 f1 b0 8d 66 8c ad 6e 8c c8 f1 b0 0d 66 8c f0 12 90 10 a0 09 b1 b0 8d 6d 8c c8 8.m......f..n.....f..........m..
00002120 b1 b0 8d 6e 8c 4c 2d 21 a9 80 8d 72 8c ad 6d 8c 8d 6b 8c ad 6e 8c 8d 6c 8c 60 a0 07 b1 b0 8d 69 ...n.L-!...r..m..k..n..l.`.....i
00002140 8c c8 b1 b0 8d 6a 8c 60 20 b9 21 c9 00 d0 03 a9 00 60 8d 66 8c 20 77 1e d0 f7 ad 69 8c 85 24 ad .....j.` .!......`.f. w....i..$.
00002160 6a 8c 85 25 a0 00 b1 7c 18 65 28 85 22 a5 29 69 00 85 23 ae 66 8c 20 59 07 20 d2 21 4c 4f 21 20 j..%...|.e(.".)i..#.f. Y. .!LO!
00002180 b9 21 c9 00 d0 03 a9 00 60 8d 66 8c 20 77 1e d0 f7 ad 69 8c 85 22 ad 6a 8c 85 23 a0 00 b1 7c 18 .!......`.f. w....i..".j..#...|.
000021a0 65 28 85 24 a5 29 69 00 85 25 ae 66 8c 20 59 07 20 67 07 20 d2 21 4c 86 21 a9 00 38 a0 00 f1 7c e(.$.)i..%.f. Y. g. .!L.!..8...|
000021c0 4c c3 21 ae 6e 8c f0 01 60 cd 6d 8c 90 fa ad 6d 8c 60 38 ad 6d 8c ed 66 8c 8d 6d 8c ad 6e 8c e9 L.!.n...`.m....m.`8.m..f..m..n..
000021e0 00 8d 6e 8c 18 ad 69 8c 6d 66 8c 8d 69 8c ad 6a 8c 69 00 8d 6a 8c 18 a0 00 b1 7c 6d 66 8c 91    ..n...i.mf..i..j.i..j.....|mf..
$

Note the first four bytes at &2000, which were put there on the real BBC with station number 1 with the following BASIC comment:

!&2000=&12345678

econet-bridge
-------------

This is the main bridge code, though it is relatively simple. It uses a configuration file which tells it about three key
types of station: Wire (on the hardware Econet), Distant (AUN stations accessible over IP) and Local (emulated within the bridge
code itself).

First, the config file. The documentation is contained in comments in the sample. Please read it.

The bridge code looks for the config file in /etc/econet-gpio/econet.cfg by default, but the -c switch allows you to specify an
alternative.

Notes on each type of configuration line:

N n
---

This sets the network number of the local wire Econet which the bridge will (when the Bridge Query code is finished) be announced
to other bridges. If you don't have this, the bridge won't deal with bridge queries. This will not stop it bridging network 0 
(your local Econet) to AUN stations in network 0.

W n s p
-------

This creates an AUN listener on port p (on each IP address available on your bridge machine) for host n.s on your local 
hardware Econet wire. (Note, because you may have an Acorn bridge to another wired Econet, you can specify a network other than 0.)

You must:

- Have one such entry for every station on your local Econet which needs to speak to the AUN world.
- Use different port numbers for each such entry. E.g. 32768, 32769, etc.

A n s host p
------------

This tells the bridge that AUN host n.s is available on host 'host' (can be DNS name or IP address) port p.

The bridge will ONLY bridge to hosts you have told it about in this way.

P n s p printer
---------------

THe bridge will accept print jobs with a locally emulated print server on host n.s port p. It will spool the output provided
by the host (which can be another AUN host as well as a real BBC on the Econet wire) into a temporary file, and when completed
it will despatch it using 'lp' to the printer named 'printer'. By editing the header file include/econet-pserv.h you can
alter the command line format which is used and, if you wish, use an entirely different printing command. Unfortunately, at 
present, there is one command per bridge - so all virutalized print servers use the same command. I suppose it would be possible
to alter the configuration format simply to specify the command to be used on a per-server basis.

Running the bridge
------------------

As long as the device has been made world writeable (see above) you should be able to run the bridge from a non-privileged user
as follows:

$ ./econet-bridge

It will produce little output in this mode, save for errors.

The -h command line switch will give you help as to other things you can do. 

-c <path> : Use alternative config.
-d        : Produce packets on stderr as they come and go. These will be AUN-type (i.e. not raw off the wire), post 4-way h/shake.
-b        : When specified with -d, produces abbreviated (~ 1 line per packet) output.
-s        : Dump a summary of the config file before bridging - useful for checking the config has been read.
-q        : Don't do bridge query responses (but the present version doesn't anyway, so this achieves nothing).

EXAMPLE CONFIG & USAGE
----------------------

Suppose you have live stations 1 & 2 on the Econet, and a fileserver on an AUN machine with IP 5.6.7.8 on port 32768.
Let us imagine the server is running BeebEm. Let us imagine that the Raspberry Pi running the bridge has IP address 1.2.3.4.

Note that BeebEm MUST be in AUN mode and have SINGLESOCKET set to 1 (these are default settings as I understand it).

The bridge configuration would be:
W 0 1 32768
W 0 2 32769
A 0 254 5.6.7.8 32768

The tail end of the BeebEm econet.cfg file would read thus:

0 1 1.2.3.4 32768               <--- Matches the port number on 'W 0 1 ...' above
0 2 1.2.3.4 32769               <--- Ditto W 0 2
0 254 5.6.7.8 32768

Make sure your BeebEm configuration includes an NFS ROM of some kind and Econet is enabled in the options.
Make sure BeebEm wakes up and doesn't complain about not being able to find an Econet address.
Start up, e.g., a Level 3 fileserver in BeebEm.

Next, load the kernel module on the Raspberry Pi (see above).

Then run the bridge as above.

You should find your real BBC can log into the BeebEm Fileserver.

The reverse also works - logging into a real BBC fileserver (or potentially SJ Research, but I don't have one) from BeebEm.

TO DO
-----

- Use better routines to access GPIOs in kernel
- Make the kernel module use ..._probe instead of ..._init
- Implement fileserver in the bridge code (for the present, aund might be usable separately - not tried it)
- Implement device tree so that the GPIO pins are defined outside the code
- Fix potential bug where the kernel module gets stuck in a non-IDLE AUN state. Probably just need a timeout somewhere.

THE END
-------

Enjoy!
