AUN to Econet Bridge - The High Performance Bridge ("HPB")
----------------------------------------------------------

/*
  (c) 2024 Chris Royle This program is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or (at your
option) any later version.

    This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
with this program.  If not, see <https://www.gnu.org/licenses/>.

*/


THANKS 
------

Two individuals, KL and IW (you know who you are) did extensive testing of both
the hardware and software involved in this project (aka trying quite hard to
break it!) in July and August 2021. I am very grateful to them for their
efforts. I should also like to express my thanks to the following on the
stardot.org.uk forums for their help, ideas, and patience: @arg, @sweh,
@IanJeffray, @Simon - and there are probably others whom I have inexcusably
failed to remember - thank you all.

The fileserver code in this repository would not have been possible to develop
without sight of the code at github.com/stardot/ArduinoFilestore.  I am told it
is stardot.org.uk user @gazzaD - well, @gazzaD, thank you - I could not have
done it without you.


WARNING - NO, REALLY, YOU SHOULD READ THIS!
-------------------------------------------

I was once told that the difference between a professional musician and an
amateur is that the amateur practices until he gets the piece right; the
professional practices until the piece simply will not go wrong.

On any view, by analogy, this is amateur code.

This is work which I have produced with no real experience of either
electronics, the 68B54 ADLC, or kernel module programming.

In particular, the following undesirable characteristics of this system should
be noted. These are typically owing to a lack of talent on my part. I well
understand the desirability of fixing them all. If anyone with more talent than
me wishes to have a go, I would be genuinely very happy. Notwithstanding the
list below, I am a huge fan of doing things the 'proper' way. It is a matter of
regret that I have not managed to do so. In particular:

	- It reads and writes directly from the GPIO hardware instead of using
	  the kernel routines. I accept this renders it less portable even
          within Raspberry Pi systems.

	- It probably does not handle AUN ACK and NAK quite the way it should.

	- It DOES NOT WORK on Pi 5 machines. Don't try. You'll be 
          disappointed.

It is some time since I saw a kernel crash with this module, but you should be
alive to the prospect that it might happen. If you use this on a production
system that's doing something else, you have been warned!


INTRODUCTION 
------------

The combination of this hardware and software is intended to provide a bridge
between a real BBC Econet and the AUN world of BeebEm (and probably other
things which use AUN). It contains also contains a relatively operable
Level3-ish fileserver, and an emulation of an Acorn print server, capable of
use by both BeebEm and real BBCs.

It is possible to put two (or more) of these bridges 'back to back' and join
two real BBC Econets together over the IP network, including the Internet,
providing the correct ports are opened. The necessary ports are the ones you
configure in the configuration file.

It is unnecessary for the two networks in a 'back to back' configuration such
as that to have discrete Econet network numbers. Properly configured, all
stations can be on the same network number, including 0.

What is more, if you are connecting to your friends' Econets and some of them
use the same network number as you, you can configure their networks to have a
different number in your config and it should all work, thus the overlapping
network numbers no longer matter.

At the moment, each individual host on each individual network must be
individually configured. A wildcard entry can be inserted to match 'all other
undefined stations on a network' but it MUST come after all defined stations.
See below.


OTHER DOCUMENTATION
-------------------

NETWORK-v2.1	         Documentation about implementation of AUN clients,
                         trunks, etc.

README.CONFIG-v2.1       Configuration file reference guide

RELEASE-v2.1             Release notes for this version

README.HPB.TECHNICAL     How the bridge works under the hood



What is is NOT 
--------------

Whilst called a 'Bridge', do *not* mistake this for a direct substitute for an
Acorn(R) Econet bridge, which will join two real BBC networks together with
different network numbers. You *can* do that with this software and its
associated hardware, but you need TWO sets to do it, and the 'bridge' is
performed over AUN over IP in between the two bridges.


Prerequisites 
-------------

The system will require:
	- Raspberry Pi Zero 2W, 3B+, or 4 (unless you are running a version 1
	  bridge board in which case nothing less than a Pi 4B will do, and you
          must not install the desktop!).

	  *** This software and its associated hardware WILL NOT WORK ON A PI 5
              - Don't even try. ***

	- A proper RPi PSU. Experimentation shows that the Econet hardware has
	  quite a current draw and an underpowered PSU can lead to rx/tx
          problems

	- No other GPIO usage on the system

	- Disable Wifi sleep on your Pi, especially if that is your network
	  connectivity of choice.

	- Whilst there was an early hardware diagram, there have been
	  significant improvements to the design, by dint of hard work on the
          part of @KenLowe and input from people like @arg. I no longer recommend 
          the original hardware design: if you want Econet wired connectivity (e.g. 
          to a real BBC) rather than just a fileserver for (say) some BeebEm 
          machines, then buy a hardware HAT from @KenLowe on the stardot forums.

	- Your installation of PiOS having the kernel headers installed (see
	  below)

	- A pre-existing functioning Econet (with clock) with a spare station
	  port to connect to the hardware, if you want to use real BBCs


If you are using a version 1 hardware board
-------------------------------------------

All recent versions sold since about 2021 are version 2 boards. If you are
using the earlier design ("version 1") which has a dedicated line for detecting
with the /CS (chip select) signal has reached the ADLC, then you also need to
fix the ARM clock in your Pi to a specific speed to stop it switching in and
out of turbo mode. If you don't, then your bridge will be unreliable because of
some sensitive timing routines in the v1 board support in the kernel module.

In your /boot/config.txt file, set arm_freq=900 force_turbo=1

... and reboot. 900MHz is conservative. It'll probably work at a faster speed
quite happily.


INSTALLATION 
------------

@KenLowe has produced a very effective quick start guide here:

    https://stardot.org.uk/forums/viewtopic.php?p=364719#p364719


Since the document is his work not mine, below is a version updated by me which
deals with v1/v2 differences and how to install if you have a version 2 board
which has not been updated.


Install the Pi OS 
-----------------

Find a spare MicroSD card. If it isn't formatted, format it to FAT32. On
Windows, Ken's choice of software for doing that is 'Rufus'.

Obtain the Pi Imager tool from the raspberrypi.com website and use it to
install the most recent 32- or 64- bit for your chosen platform but don't
install the desktop. As part of that process:

- Always use the "Lite" version (doesn't install the desktop).

- Use the "Advanced Options" cog and set an appropriate username and password
  for logging into your Pi.

- In the same set of options, enable SSH so that you can access the Pi remotely
  without needing a screen or keyboard.

- Also configure your WiFi settings if you want to use it.

- Then tell the imager to write the OS to the card and, when it has verified
  and finished, put the card into your Pi.


Connect the Bridge board to the Pi's GPIO pins.


Turn on your Pi and connect using SSH (e.g. PuTTY on Windows, or the built in
ssh client on MacOS/Linux). Log in with the username & password you set
earlier.


If you are using a 'shutdown' button that connects to the GPIOs, use your
favourite editor (e.g. vi, nano) to edit /boot/config.txt (or, more recently,
/boot/firmware/config.txt) to include the following additional entry:

	dtoverlay=gpio-shutdown


If you are using a version 1 hardware board, as referred to above please also
include the following entries:

	arm_freq=1000 
        force_turbo=1

Then save config.txt


Next, you will need to install some packages to ensure that the Pi can build
the bridge software itself, so execute the following commands:

	sudo apt update 
        sudo apt full-upgrade 
        sudo apt install raspberrypi-kernel-headers libexplain51 \
             libexplain-dev libexplain-doc libssl-dev git


Then reboot your Pi:

	sudo shutdown -r now


When rebooted, log back in over SSH and install the bridge software

	git clone https://github.com/cr12925/PiEconetBridge 
        cd PiEconetBridge
        make install

The software should compile cleanly.


The next step depends on what kind of board you have.

	A. Version 1 boards. You need to fix your ARM processor frequency if
you didn't do it above and then put an overlay in your /boot partition
	
		make eeprom-v1

	   You will need to follow the instructions to edit your config.txt
(use the same method as above). You will need to ensure that the dtbo file
is copied into /boot/overlays (or /boot/firmware/overlays depending on your
system), and that you put the right entry in your config.txt:

	sudo cp {PiBridgeDirectory}/dts/econet-gpio-v1.dtbo /boot/overlays

and	Include "dtoverlay=econet-gpio-v1" in your config.txt.


	B. Version 2 boards which do not have an up to date EEPROM. (As at
31.03.2024, no version 2 board 'in the wild' has been updated). The following
will update your EEPROM without which the bridge kernel module will not
operate. You need only do this once for each physical board.

		First, ensure your EEPROM's write enable solder bridge is made.
See instructions with your Bridge board or contact supplier if you don't know
how. Check the revision number of your board (it'll be printed on the board):

	- Revision 1 boards do not have an EEPROM at all (see (A) above)

	- All revisions up to and including rev. 4c have a solder bridge
	  on the underside of the board labelled JP1. This will be unmade 
	  when supplied. It must be made (linked with solder) to write 
	  to the EEPROM.

	- From rev 4d onwards, SW1 of the DIP switches enables and 	
	  disables the EEPROM write protect. Set it EAST (ON) to enable
	  writing to the EEPROM.

	Then:

		make eep 
                make eeprom-v2

                If you do not have the soldering tools or skills to make the
EEPROM solder bridge, JP1, or if you have somehow managed to get hold of a
revision 1a bridge board (where the EEPROM is wired to the incorrect GPIO
pins), then you will need to implement a workaround as described in (C),
below.


	C. Version 2 boards which do not have an up to date EEPROM and which
have a defectively wired write enable line (or where you do not for some reason
fancy re-blowing the EEPROM as in (B) above!). These EEPROMs cannot be upgraded
following (B) above and you need to implement a workaround as follows:

		make eeprom-general 
                sudo cp dts/econet-gpio-v2-overlay.dtbo /boot/firmware/overlays

           ... and then edit your config.txt to include

                "dtoverlay=econet-gpio-v2-overlay"

	   That will cause the missing parts of the EEPROM to be put into the
Device Tree by way of an overlay at boot time, and thus enable the module to
start properly.

           It is thought that there are in fact no such boards "in the wild",
as they were only produced in small numbers and weren't sold as bridge boards.
This section (C) is here just in case.


Then reboot:

	sudo shutdown -r now



A WORD ON THE KERNEL MODULE 
---------------------------

The kernel module does two things:

	- First, it transmits and receives packets through the ADLC.

	- Second, it implements a state machine which does the 4-way handshake
	  and converts data packets off the wire into AUN-style packets.

(Internally, and when communicating with the utilities, it adds an extra four
bytes on the start of each packet which match those on an Econet frame to make
it easier to work out where a packet is going, viz.  destination station,
destination network, source station, source network (in that order).)
	
	  Similarly, any packet delivered to the kernel module when it is in
AUN mode must have those four extra bytes on it.

The AUN (4-way-handshake) mode is enabled when a 'station set' is delivered to
the kernel module. The station set map tells the module which stations it
should handshake for, or otherwise capture traffic for (e.g. immediates,
broadcasts). Only stations which appear in the map (and there are macros to put
stations in the map) will have their traffic forwarded to userspace when in AUN
mode.

If no station map is put into the kernel module after a reload or reset, the
module will remain in non-AUN mode. In that mode, it captures all packets off
the wire, and does *no* 4-way handshake. It simply delivers raw packets through
/dev/econet-gpio to userspace. This mode is not useful practically, but
provides a means of doing network monitoring. Thus the 'econet-monitor'
utilities does not upload a station map, so that the module remains in 'raw'
mode.


NORMAL OPERATIONS 
-----------------

The installation procedure should have accomplished the following things:

- Installed the kernel module and enough EEPROM or Device Tree overlay
  information to cause it to load an initialize on boot, including creating the
  /dev/econet-gpio device. The kernel module will also (subject to the DIP
  switches on the Bridge board - see the separate hardware documentation which
  came with your board):

	- Turn on the Pi's PWM on GPIO 18 with a waveform that the Bridge board
	  can use to provide an Econet clock to the network, at 1us mark / 5us
          period.

	- Turn on the Pi's GPCLK0 on GPIO 4 to provide an 8MHz clock which is
	  divided down to 2MHz to drive the ADLC (network controller) on the
          Bridge board.

- Installed various utilities (described below), including the main HP Bridge
  utility which is the thing you need to run to get machines (real or virtual)
  to talk to the Pi.

- Implemented a udev entry which means that the /dev/econet-gpio device is
  owned by the right user.

- Implemented a systemd script which starts the HP Bridge on boot and re-starts
  it if it stops.

- Provided a stock configuration which sets up the wired network as network 1
  and provides a fileserver on host 254 (i.e. 1.254).

Thus, after the final reboot in the installation procedure, if you have a BBC
plugged into your Bridge board and a properly terminated network (either with
the DIP switches on the Bridge board, or separate), and an active network clock
(ditto), then providing your BBC is Econet-enabled and has NFS or ANFS in it,
you should be able to log into the fileserver on the Pi with

	*NET *I AM SYST

The built in fileserver will have a blank 'disc' called PIBRIDGE-00. You will
need to copy library utilities and other data onto it. The fileserver broadly
supports Acorn Level 3 operations (in full, I think!) though there are some
differences - see "THE FILESERVER" below for operation and configuration
information.


Print server 
------------

The PiBridge implements a print server. It can have multiple printers per
fileserver, and their information can be obtained, and printers selected, using
MDFS-style commands such as *PRINTER and *PRINTOUT .

Documentation below.


IP Server 
---------

The PiBridge implements a router-version of the Phil Blundell IP ROM protocol,
thus enabling real BBCs to access the Internet via Telnet or raw data over a
TCP port (e.g. to connect to a Viewdata system available by that means). PB's
ROM uses the serial buffer for sent/received data if not using the Telnet
programme, so you need something like the Prestel ROM to make it work. (It
doesn't work with Commstar, though.)

See the NETWORKING readme for more information.


AUN Operations 
--------------

The bridge can:

- Expose whole networks or single hosts that it knows about over AUN, so that
  they can be accessed by Emulators such as BeebEm, or real RISC OS machines on
  an Ethernet.

- Allow access from unknown AUN clients, and allocate them dynamic network
  addresses (see the DYNAMIC configuration option below)


Trunks and Econet wired bridges 
-------------------------------

The PiBridge can:

- Interoperate with Acorn/SJ bridges on an Econet and exchange network
  information with them and correctly route traffic.

- Interoperate with other PiBridges over UDP-based encrypted trunks to exchange
  network information and route traffic.

- Detect when an announced network is already known, and drop the annoucement
  for that particular network

- Translate an incoming network number announced to the bridge into a different
  network number if you have networks with overlapping numbering (providing
  there is no loop in the network!)

- Announce a local (or other known) network to a distant PiBridge as a
  different number (again, in case of overlapping networks)

- Block or allow particular network numbers from either being received on
  inbound announcements, or being sent out on outbound announcements (e.g. if
  you want to stop one of several remote network numbers on a particular trunk or
  Econet communicating with your Bridge and onward connections, or if you wish to
  keep one or more of your networks from being seen at all by remote sites).

- Block selected traffic (like a firewall) on trunk connections. (This is
  different to blocking or allowing network number announcements: the firewall
  operates when the networks are known (i.e. not blocked), but then it can
  selectively block particular traffic between certain combinations of individual
  hosts, although it also supports wildcards for "any" host.)

- Implement a 'many to one' NAT system on trunks and Econets as a means of
  connecting many networks together which may have overlapping numbers or where
  there would be insufficient network numbers to join them all together even with
  NAT, ideally where such distant networks are sparse in terms of numbers of
  stations. What the pool system does is allocate a number of networks into the
  "pool". It then does not announce the pooled networks arriving on each trunk or
  Econet to any other bridges, but instead each time it sees traffic from a
  station, it allocates a dynamic host number out of the pool and translates back
  and forth. It is possible to statically allocate entries if (for example) a
  server is to be exposed. This was developed for the Econet LAN parties at
  Bletchley so that many remote sites could join.

See the NETWORKING and README.HPB.TECHNICAL docs.


STARTING, STOPPING, AND CONFIGURATION 
-------------------------------------

The utility which runs the bridge's day to day operations is called
"econet-hpbridge" and will have been installed in your system by the
installation routine. You can run it as the user that installed it wihtout
'sudo'. It generates help if run as

	econet-hpbridge -h

You will see a number of tunable settings which are discussed later.

econet-hpbridge is the second generation of the user space bridge code. It is
backwards compatible in terms of features with econet-bridge, which is the
first generation. However, it has a number of improvements:

A. It is no longer necessary to expose all of your Econet hosts to AUN. You can
   do so selectively.

B. Performance is intended to be superior because, among other things, the code
   is threaded and so writes to the Econet (wire) no longer hold up other traffic
   passing through the bridge (e.g. from an AUN or trunk host to a local
   fileserver).

C. The code has been designed to cope with multiple Econets (wires) in case of
   future expansion. (The kernel module does not presently support multiple
   different Econet wires. But it might...)

D. The IP Gateway for Phil Blundell's EcoTCP ROM is now built in.

E. *ALL* configuration requires network numbers other than 0. Even if you have
   only one network. The system works out when to substitute '0' as the network
   number in a transmitted packet (and vice versa on receipt), just as real Acorn
   systems did. This is to simplify configuration.

F. The configuration is designed to be far more human readable and to require
   fewer configuration lines to achieve a given purpose.

G. The configuration is more flexible in terms of exposing your wired / local
   hosts to AUN, and in terms of defining where remote AUN/IP hosts are and what
   port numbers they use. Although at the time of writing it remains necessary to
   create any IP tunnel or sub-interfaces for use with the bridge, it is hoped
   that even that can be automated in future. Thus, to define a whole network's
   worth of AUN/IP machines only a single line is required in the configuration
   (see below). To expose an entire network of Econet (or even trunked) machines
   to AUN/IP, again only a single line of configuration is needed, but you will
   first need to add all the necessary sub-interfaces to your 'lo' or ethernet
   interface first (see elsewhere).

H. The command line parameters have been considerably simplified.

I. Having at least one Econet board is no longer required. If you do not define
   an Econet (wire) network, the system won't try to find one and will cheerfully
   just operate doing trunking and/or AUN/IP.

J. For the large majority of cases, only memory which is actually needed is
   allocated, thus the large memory allocations which were used (even at startup)
   in the old bridge are avoided.


After installation, the Bridge will be configured to start econet-hpbridge when
the Pi boots, so you should not need to do anything but switch on in order to
have a working system.

By default, the Bridge is configured by editing

    /etc/econet-gpio/econet-hpbridge.cfg.  

You must re-start the bridge each time you change the file. You can do that by 
logging into the bridge and executing:

	sudo systemctl restart econet-hpbridge

If you want to stop the bridge software you can run

	sudo systemctl stop econet-hpbridge

If you don't want the bridge software to run at boot, you can run

	sudo systemctl disable econet-hpbridge

The reverse of each of the above two are:

	sudo systemctl start econet-hpbridge 

and	sudo systemctl enable econet-hpbridge

... respectively.

You can use the '-c' switch to econet-hpbridge to make the bridge use a
different configuration file if you want.


Command line parameters 
-----------------------

You will not normally need any of these.

-h		Produces help text.

-c <path>	Specify alternate configuration file. Default is

                /etc/econet-gpio/econet-hpbridge.cfg

		In theory this makes it possible to run two independent bridges
                on the same machine. If and when mulitple Econets are supported, 
                they could be run either by two separate userspace bridges, or 
                by one.

-d <path>	Path to write debug output to. It will go to stderr by default
                as it previously did, but it can also now be directed to a file. 
                (You can always 'tail -f' the file to see it in another console 
                window.)

-e		Turn on extra kernel logging to dmesg

-l		Local mode. Won't attempt to open Econet devices even if they
                are defined. 

-n <num>	Number of data bytes to display when showing packet data.
                Default is 0. They are now displayed rather more nicely than 
                before, in 16-byte lines with characters at the right.

-p [iIoO]	Turn on packet dumps. You must select at least one of the four
                directions, but you can have any combination thereafter.
	
		They mean:

		i:	Packet has arrived off the device in question. This
                        will show its properties before any network number 
                        translation. E.g. packets off the Econet may show 
                        network 0.

		I:	Packet as received from a device, but after any network
                        number translation. E.g. if your local Econet is 
                        network 6, a packet which shows as 0.5 on an 'i' trace 
                        will now show as 6.5. Traffic arriving on a trunk with 
                        network address translation turned on will show its 
                        translated network number rather than the one it arrived 
                        with (which will appear on 'i').

		o:	First output stage in destination device. Shows network
                        numbers before any translation (so this is pretty much 
                        like 'I' but in the output phase).

		O:	Final output stage (if the packet has not been dropped
                        for some reason) - the equivalent of 'i' but for output: 
                        it shows the final network numbers as transmitted with 
                        the packet.

		Note, even if you turn all these on, you may not see four
traces per packet. Example reasons are:

		- Traffic generated by a local emulator. There will be no i or
		  I phases.

		- Broadcast traffic. You'll see i and I, but probably multiple
		  o and/or O.

		- Traffic dropped by firewall - you'll probably only see i and
		  I.

		- Traffic with no known destination - you'll probably only see
		  i and I.

-s		Dump configuration at startup. The more '-s's you do, the more
                it will tell you. E.g. with only one, it won't bother dumping 
                all your remote AUN/IP hosts.

-z		Debug. Specify up to 5 times for increasingly eye-watering
                output. One is sufficient to tell you what is going on in normal 
                operation. Three starts to get very busy. 5 is only really 
                useful if you're writing to a file and will examine it in detail 
                later.

		Specify none, and without -s you'll get no output except
                configuration or startup errors to stderr, almost all of which 
                will cause the bridge to exit anyway.

		NOTE: This now controls fileserver debug as well.  No -z is
                equivalent to the old quiet.  One is equivalent to not quiet 
                (ie. produces logs of activity) Two is equivalent to the old 
                'noisy'.

--disable-7bitbodge	Turns off the Acorn '7 bit bodge' required to enable
                Y2K compliant dates in fileserver traffic. This is on by default. 
                This command line switch turns it off for *all* fileservers 
                emulated by this bridge. (In the future, this will be a per-server, 
                persistent, configurable.)

--enable-syst-fast	Turns on the 'Bridge' privilege that allows *FAST to be
                used against a given Fileserver station. Since in the future this
                will allow the user to shut down the Pi hardware, only turn this on
                on fileservers you will use yourself. Comment any others out of
                the configuration before using this and then uncomment them later.
                You need only do this once per fileserver - it is not needed every
                time.

--malloc-debug	Providing you have at least -zz, this will show you all
                malloc() and free() attempts, what they were for and the amount of 
                memory sought/freed.


The next few switches ought not to be needed but just in case:

--wire-max-tx <n>	Maximum number of times to try and transmit a packet on
                        the Econet before giving up. If you have RISC OS machines, 
                        this should be at least 3. It defaults to 10.

--wire-interval <n>	Milliseconds between retransmit attempts. Default 50.

--wire-imm-wait <n>	Milliseconds to wait before putting the Econet module
                        back into read mode after receiving an Immediate Query 
                        from the Econet. If the queried station never responds the 
                        Econet will otherwise get stuck waiting to transmit the 
                        reply and will read no more traffic. It will, for some 
                        seconds, also sit in flag fill mode.  Default is 1000 
                        (i.e. 1s).

--aun-max-tx <n>	The comparable setting for AUN/IP to --wire-max-tx RISC
                        OS AUN/IP machines occasionally are not listening when 
                        they should be. So at least 3 is a good plan.

--aun-interval <b>	Milliseconds between AUN/IP retries for an
                        unacknowledged packet (or a negative acknowledged packet 
                        within the NAK tolerance (see below)). Default 1000, 
                        because BeebEm sometimes takes a while to deal with 
                        traffic and anything lower seems to cause problems. If 
                        you have no BeebEm, you could probably lower this 
                        significantly (e.g. more like 50 ms).

--aun-nak-tolerance <n>	Number of NAKs to tolerate from an AUN/IP host before
                        treating it as really not listening. This is because RISC 
                        OS sometimes isn't listening when it ought to be and will 
                        NAK a packet it should really have accepted.  Beyond this 
                        limit, the bridge will treat a NAK as a real NAK. Prior to 
                        the limit, it will just have another go at transmission. 
                        Default 2.

--max-sockets <n>	If you expose a lot of stations, you will need to
                        increase the number of file descriptors available to the 
                        bridge. A process is often limited to 1024, and if you expose, 
                        say, 4 full networks, that would be just over 1,000 and a few 
                        more for other functions may exceed the limit.  Typically you 
                        will see an error on startup to the effect that the bridge 
                        could not start a listener for an AUN exposure. If so, use this 
                        command line option to increase the limit if your system will 
                        allow you to - e.g. to 8192, or even higher.

--flashtime <n>		Number of milliseconds to flash each of the activity
                        LEDs (read, write) *off* to signal activity on the Econet.

--immediate-timeout <n>	Number of milliseconds of flag fill after the bridge receives
			an immediate query for a non-local host before it will 
			decide that the remote host is not going to respond and
			will therefore drop the flag fill. The flag fill will
			busy out the network, so on congested networks shortening
			this to as little as possible will speed things up if there
			is a lot of traffic (e.g. from !Machines) which is probing
			to see if lots of non-local hosts are actually there or
			not (e.g. with MachinePeek queries). Since the bridge has
			no way of knowing if those remote hosts /are/ there, it must
			flag fill (in case the machine is present and wants to 
			reply). This timeout is how long the bridge waits to decide
			that such a machine is not going to respond and un-busy 
			the local Econet.

--led-blink-on		Read/write LEDs (on more recent boards) will blink ON
                        for activity instead of OFF.

--leds-off		Read/write LEDs permanently OFF.

--pool-dead-interval <n>	Number of seconds without reception before a
                        host allocated out of a pool (other than statically) is 
                        declared dead and can be re-used.

--trunk-keepalive-interval <n>	Number of seconds between trunk keepalives
                        Default 30

--trunk-dead-interval <n>	Seconds without traffic before trunk considered
                        dead. Default 2.5 x keepalive interval.

Bridge protocol tunables

--trunk-reset-qty <n>	Number of bridge reset packets to send on UDP trunk.
			Default 2

--wire-reset-qty <n>	Number of bridge reset packets to send on Econet wire.
			Default 2 - same as Acorn & SJ bridges.

--trunk-update-qty <n>	Number of duplicate bridge update packets to send
 			on UDP trunks.
			Default 2

--wire-update-qty <n> 	Number of duplicate bridge update packets to send on
			Econet wires
			Default 10 - same as Acorn and SJ bridges

--bridge-query-interval <n>	Minimum time between responses to IsNet or
			WhatNet queries from any given station on the wire
			in ms. Calculated separately for each type of query,
			but the minimum time from this parameter is applied
			to both.
			Default 2000 (2s)

--no-keepalive-debug	Filters packet dumps (if turned on) for packets
			with port &9C and ctrl &D0 (trunk keepalives)

--pool-reset <1/0>	Whether the bridge will forward bridge resets and
			updates from a trunk or Econet wire where /all/
			networks on that device are subject to pool nat.
			Default is 0 (no forwarding). In general, if all
			networks (as opposed to just some) are pooled, then
			no downstream net list will change as a result 
			of the reset or update, so they are no longer
			forwarded. Setting this to 1 will cause the
			resets and (to the extent they change a net list)
			updates to propagate.

--bridge-loop-detect <1/0>	Not yet implemented. Will turn on/off 
			bridge loop detection (which, when written, will
			disable all but local traffic on a device which
			appears to deliver looped traffic back to the
			source bridge).

The Configuration File 
----------------------

See README.CONFIG


ON BOARD CLOCK / TERMINATION 
----------------------------

On v2 revision 2a boards and above, the HAT has optional termination and clock
circuitry on the board. The kernel module will detect a version 2 board
(including those earlier than 2a) and will:

- Put an 8MHz clock out on GPIO 4 (BCM numbering), which can be used to clock
  the ADLC. There is a hardware solder bridge which switches from an on-board
  oscillator to the Pi-supplied clock. (The 8MHz waveform is divided down before
  it gets to the ADLC, which needs 2MHz.)

- Turn on the PWM on GPIO 18 (BCM numbering) which feeds the clock generation
  circuitry on a v2r2a (and above) HAT. It will turn the clock on at a
  relatively slow speed (5us period, 1us mark).
  
  You can alter the period and mark with the econet-clock utility.  (See
  below.)

If you have a board which is *earlier* than v2 r2a then do not expect clock
generation on board - the electronics simply are not there.

(On a v1 board, the pin which is used for the PWM clock output is used for
something else, so the kernel module will not put a clock out on it at all.)


THE UTILITIES 
-------------

These run from simple to more complex. Each responds to -h on the command line
to give you help.


econet-hpbridge 
---------------

Described throughout this document.


econet-monitor 
--------------

First, econet-monitor. This reads /dec/econet-gpio with the kernel module in
raw mode and simply dumps every packet it sees.

You should see streams of packets (on an active network) which will include all
four packets (separately) of the four-way handshakes. This utilities does *not*
glue them together into one line like Acorn's own NETMON. You literally see
what's on the wire.

The output is verbose by default. You can get a one-line-per-packet (ish)
output by specifying '-b' (brief) on the command line.

One easy way to see some traffic is to run the monitor on a live econet and
press BREAK on a real BBC with the network software loaded. Certainly on a
Master (which is all I have), the ANFS will send 9 bridge queries out. These
are short broadcasts whose packet data includes the word 'BRIDGE' and you
should see them appear on the monitor screen.


econet-imm 
----------

This utility performs various sorts of 'immediate' queries on the econet. It
leaves the kernel in raw mode, sends the query and reads the next packet off
the wire and (save for the continue and halt operations) tells you what was in
it.  

It implements the following operations: Halt, Continue, Machine Peek, Memory
Peek.

In every case you *must* provide a source and destination station number. They
will both be treated as being on net 0 for the purposes of this utility, so
only local stations can be queried (i.e. not those over traditional Econet
bridges). Obviously your own source station number should not already be in use
on the network.

Examples (but see help for detail) with example output:

Send machine peek to station 1 from station 250

$ ./econet-imm -s 1 -d 250 -m Station reports being a BBC Master 128 OS 3, NFS
version 4.25.  $

Send HALT to station 1 from station 250

$ ./econet-imm -s 1 -d 250 -j $

Send CONTINUE to station 1 from station 250

$ ./econet-imm -s  1 -d 250 -c $

Send memory peak to station 1 from station 250 for addresses &2000 to &21FF

$ ./econet-imm -s 1 -d 250 -p -q 2000 -r 21FF Remote memory peek received:
00002000 78 56 34 12 d0 04 a9 d4 d0 18 18 20 c3 20 20 3a 21 20 48 21 d0 0c 20 0f 22 d0 07 20 7a 22 d0 02 xV4........ .  :! H!.. .".. z"..  
00002020 a9 00 48 a0 04 ad 6b 8c 91 b0 c8 ad 6c 8c 91 b0 c8 ad 72 8c 91 b0 68 4c 60 18 20 7d 1a a0 06 b1 ..H...k.....l.....r...hL`. }....  
00002040 b0 20 4c 11 d0 0f 20 8d 1d d0 0a a0 09 b1 46 29 02 d0 04 a9 c1 d0 69 38 20 c3 20 ad 72 8c f0 3c . L...  .......F)......i8 . .r..< 
00002060 18 a0 00 b1 7c a0 09 71 b0 8d 6f 8c c8 b1 b0 a0 01 71 7c 8d 70 8c c8 b1 7c 69 00 8d 71 8c 18 a9 ....|..q..o......q|.p...|i..q...  
00002080 ff 6d 6f 8c a9 04 6d 70 8c 8d 70 8c a9 00 8d 6f 8c 6d 71 8c 8d 71 8c 20 25 1d d0 24 a0 09 b1 b0 .mo...mp..p....o.mq..q. %..$....  
000020a0 8d 6d 8c c8 b1 b0 8d 6e 8c 20 3a 21 20 7f 21 d0 0f 20 13 22 d0 0a 20 a8 22 d0 05 20 b0 23 a9 00 .m.....n. :! .!..  .".. .".. .#..  
000020c0 4c 60 18 a9 00 8d 72 8c a0 09 b0 03 a0 06 38 b1 7c c8 8c 66 8c a0 00 f1 7c 8d 6d 8c ac 66 8c b1 L`....r.......8.|..f....|.m..f..  
000020e0 7c a0 01 f1 7c 8d 6e 8c ee 66 8c ac 66 8c b1 7c a0 02 f1 7c b0 08 a9 00 8d 6d 8c 8d 6e 8c d0 18 |...|.n..f..f..|...|.....m..n...  
00002100 38 ad 6d 8c a0 09 f1 b0 8d 66 8c ad 6e 8c c8 f1 b0 0d 66 8c f0 12 90 10 a0 09 b1 b0 8d 6d 8c c8 8.m......f..n.....f..........m..  
00002120 b1 b0 8d 6e 8c 4c 2d 21 a9 80 8d 72 8c ad 6d 8c 8d 6b 8c ad 6e 8c 8d 6c 8c 60 a0 07 b1 b0 8d 69 ...n.L-!...r..m..k..n..l.`.....i 
00002140 8c c8 b1 b0 8d 6a 8c 60 20 b9 21 c9 00 d0 03 a9 00 60 8d 66 8c 20 77 1e d0 f7 ad 69 8c 85 24 ad .....j.` .!......`.f. w....i..$.  
00002160 6a 8c 85 25 a0 00 b1 7c 18 65 28 85 22 a5 29 69 00 85 23 ae 66 8c 20 59 07 20 d2 21 4c 4f 21 20 j..%...|.e(.".)i..#.f. Y.  .!LO!  
00002180 b9 21 c9 00 d0 03 a9 00 60 8d 66 8c 20 77 1e d0 f7 ad 69 8c 85 22 ad 6a 8c 85 23 a0 00 b1 7c 18 .!......`.f. w....i..".j..#...|.  
000021a0 65 28 85 24 a5 29 69 00 85 25 ae 66 8c 20 59 07 20 67 07 20 d2 21 4c 86 21 a9 00 38 a0 00 f1 7c e(.$.)i..%.f. Y. g. .!L.!..8...| 
000021c0 4c c3 21 ae 6e 8c f0 01 60 cd 6d 8c 90 fa ad 6d 8c 60 38 ad 6d 8c ed 66 8c 8d 6d 8c ad 6e 8c e9 L.!.n...`.m....m.`8.m..f..m..n..  
000021e0 00 8d 6e 8c 18 ad 69 8c 6d 66 8c 8d 69 8c ad 6a 8c 69 00 8d 6a 8c 18 a0 00 b1 7c 6d 66 8c 91    ..n...i.mf..i..j.i..j.....|mf..  
$ 

Note the first four bytes at &2000, which were put there on the real BBC with
station number 1 with the following BASIC comment:

!&2000=&12345678


econet-ledtest 
--------------

Test harness utility for the activity LEDs introduced on v2 r2a boards.

When run, the system will run through a cycle of LED patterns in order to
determine whether the LED components are functional.


econet-clock 
------------

If you have a v2 r2a (or above) HAT, then this utility can be used to set the
period and mark of the Econet clock generated by the Pi and the line drivers on
the HAT. It will achieve precisely nothing if you have a board which is lower
than that revision.

Examples:

econet-clock -p 5.5 -m 1

... sets a 5.5us period with a 1us mark, apparently suitable if you have BBCs
with second processors enableed on your Econet.

For faster clocks (which may not play nicely with BBCs at all, but may well do
with Archimedes), try (for example)

econet-clock -p 3 -m 1


econet-fslist 
-------------

Uses the PIPE client connector (see configuration instructions) to do the
equivalent of the MDFS *FSLIST utility. It broadcasts a file server version
query and displays the answers. Without a pipe connector configured, this will
not do anything for you.

-p specifies the named pipe pair that the utility will use to talk to the
   network.

econet-isnets
-------------

Uses the PIPE client connector (see configuration instructions) to query
each possible available network using the IsNets broadcast query, and
reports the local network number and which other networks are known to
local bridges.

-p specifies the named pipe pair that the utility will use to talk to the
   network.

econet-servers 
--------------

In similar vein to econet-fslist, this attempts to do the equivalent of the
MDFS *SERVERS command. The command line takes just the -p parameter.


econet-trace 
------------

This takes -p, -n and -s parameters for pipe filename, destination net and
station respectively. It will attempt to trace a route across a network linked
by PiBridge trunks, and inform you of each hop the traffic passes through on
the way, including what kind of transport the next hop is (e.g. trunk, wire,
final station, local pipe). Acorn bridges will not respond to the probes this
utility puts out. Although I have no Acorn bridges at PiBridge Towers, I would
expect that if the traffic traverses an Acorn or MDFS bridge, but thereafter
hits a PiBridge for onward transmission, there will simply be a gap in the
trace rather than a failure - but I don't know!

A happy accident of the pool nat implementation is that trace will not
traverse a pool device, thus hiding the networks behind it.


econet-remote 
-------------

Takes the -p, -n and -s command line parameters and implements a version of
*REMOTE . This will not work against BeebEm-type stations because they do not
implement the 4-way handshake required on immediate queries with control byte
&85 like a real BBC does. But it will allow basic remote control of a BBC that
is not protected from *REMOTE with *PROT.

Note, obviously, that certain output characters from the BBCs are for things
like changing text colour in MODE 7 and so forth, and will not do anything on a
unix-like terminal, or may cause weird characters to appear on screen.


PRINT SERVER AND PRINT HANDLERS 
-------------------------------

If you use a print serer, you can control the headers and footers sent by the
bridge to the printer in question by adding files into or modifying files
within /etc/econet-gpio/printers.

Examples are provided in the repo.

The content of the printers directory provides default & specific ways of
introducing header files and command line switches to the lp or sendmail
commands which are finally used to deliver print jobs to their ultimate
destinations.

The files are called header.XXX and conf.XXX where the 'header' file is
prepended to the print job when it is sent, and 'conf' contains bash variable
definitions to enable command line switches to be pre-pended to the sendmail or
lp command line (i.e. after 'lp' but before any other parameters) in case you
want to tweak how your system prints things.

Suppose a user ("CHRIS") prints a job to a printer ("LASER"), the system will
search for header and conf files in priority as follows (all within
/etc/econet-gpio/printers):

    LASER.CHRIS.header 
    LASER.header 
    default.header

Thus the particular user can have a specific header file, but if not then the
printer itself can have a specific header, and otherwise the default header
will be picked up.

The header files can have variables substituted into them before the job is
sent. They are fairly self-explanatory in most cases:

_USERNAME_ : Logged in username, or 'ANONYMOUS' if not logged in

_SERVERNETWORK_ : Network number of print server 

_SERVERSTATION_ : Station number of print server 

_NETWORK_ : Network number of client station 

_STATION_ : Station number of client station 

_DESTINATION_ : Unix destination of print job (e.g. 'printer1' or 
      'example@examle.com' 

_DATE_ : Date in dd/mm/YYYY format

_TIME_ : Time in hh:mm format

The same priority system happens for the conf files.

If the printing user is not logged into a PiFS fileserver, their username will
show as 'ANONYMOUS'. Thus, a particular header for not logged in users can be
created with, e.g., a massive banner saying that someone is trying to print
without logging in(!).

If you are sending by email, you should really have a bespoke header file
because it can put the minimal email headers (To: and Subject:) into the
output. An example for a printer called 'EMAIL' is provided.

The conf files simply have two lines (both optional):

    cmdopts="..." 

    cmdexec="..."

The first is the command options to put after the name of the deliverying
binary (lp or sendmail depending on whether there is an '@' in the unix
destination for the job).

The second (cmdexec) allows you to specify a particular binary to do final
delivery if you don't want lp or sendmail for this printer. E.g. if you wanted
to send the print job by some sort of messaging service you can access over the
Internet.


THE FILESERVER 
--------------

The bridge code now includes what appears to be a relatively stable Level3-ish
fileserver. 

FURTHER IMPORTANT NOTE: No Library, Welcome or Utilities are provided with this
software. You will need your own and you will need to copy them onto the system
using something like COPYF. If you search the various enthusiast sites, I am
sure you will find them. COPYF should work to copy them to a newly created
Library directory as SYST once you get the server up and running.

One function not implemented is user quotas. READFREE will return something,
but it will be erroneous. SETFREE will appear to complete but achieve nothing.


PiFS vs Acorn Level 3 vs MDFS 
-----------------------------

As above, the PiFS broadly supports most things that a Level 3 fileserver from
Acorn did. There are some differences however:

- Groups are not yet supported.

- The Passwords file is not in the main root directory on any disc. It is held
  separately. System privileged users can read and write to it by opening
  "%PIPASSWD".

- Directories by default have full privilege sets. Where the Level 3 system had
  all directories as "WR/R" but only displayed "DL/", PiFS implements full
  permissions on directories and displays them by default. You can turn the
  former off, but not yet the latter (see v2.2 roadmap above!). Thus you can stop
  a user from even changing into any given directory if they do not own it by
  removing the "R" permission for non-owners.

- By default, ownership is per file and per directory. Acorn Level 3
  implemented an ownership model where everything within a user's home
  directory was treated as owner by that user. PiFS has ownership for every
  object. Thus a user can have a home directory they do not own, or can have a
  file in their home directory they do not own and (if there are no 'other'
  permissions on it) cannot access it either. This can be changed for each PiFS
  with a software switch. See below.

- PiFS implements the "7 bit bodge" to provide dates into this century. Not all
  Level 3 systems did.

- A single Pi bridge can run up to 4 fileservers. (There is in fact no
  conceptual limit, but the memory to be reserved for each server takes up
  space - so I set it to four. You can always change the #define in fs.c if you
  want - it shouldn't break anything.)

- By default, the PiFS will only let a given station have 8 file descriptors -
  each having a different bit set in the file descriptor provided. 3 are
  typically used for URD, CWD and LIB. This is compatible with NFS 3. If you only
  use ANFS (or RISC OS), you can tell the FS to allow many handles (i.e. with
  more than one bit set in the byte). See below. There is still a maximum of 512
  files open at any one time per fileserver though.

- Where the L3 server will not permit *DIR ^ within your home directory or $,
  this server *will*. From home it has the expected behaviour.  From $ (or if
  $ is home) it will effectively be ignored.

- You can *VIEW a PiFS station and it will give you information about what how
  it is configured.


Similarly, when enabled, *some* MDFS functionality is available, e.g.

- A read-only MDFS Passwords file ("%PASSWORDS"). This is created on the hoof
  at start up from the PiFS's own data. It cannot presently be written to.

- Various fileserver operations - such as obtaining printer information - are
  available.

User privilege differences. PiFS implements the following "privileges" (or
"user flags"):

- System - has System privileges on the particular fileserver

- Bridge - has Bridge privileges - will be able to use *FAST against the
  fileserver and can potentially thus shut down the entire Pi.

- Locked - User cannot log in

- Password change - User cannot change password

- ChRoot - When user logs in, $ for this user will be their home directory. The
  will see no other directories or discs.

- Hide Others - The FS will not show this user any other users who are logged
  in (e.g. by using *USERS). A compbination of ChRoom & this privilege will
  cause a user to "appear" as the only user on the system and with the only files
  on the system too. This is useful for games that want to be installed in $.

  (See also *DISCMASK builting command.)

- ANFS Name Bodge - If the PiFS sees [0-9].xxx it will interpret that as
  meaning "Disc [0-9].$.xxx". This is to help cope with ADFS/DFS-based games
  which want to refer to :0.xxxx. ANFS strips the ':' off the front before
  sending the name to the FS. This is a per-user option so that it doesn't
  disrupt that operation for users not involved with programmes which don't
  suffer from that way of working.


File privilege differences 
--------------------------

- See above as to directory permissions.

- The server implements the Level 3-esque set of read, write and locked (can't
  delete) permissions for Owner and Other.

- In addition, PiFS supports *LINK which puts a symbolic link in the filesystem
  and makes a file in one directory appear in another.

- PiFS also implements a 'Hidden' permission - which will stop a file appearing
  in directory listings except for the owner & System privileged users.

- When *LINK is used, the linked file will by default be Locked.


Storage of files within PiFS 
----------------------------

All files are stored in the Pi filesystem. The default fileserver stores files
in ~/econetfs . Each "Disc" is created as a directory thereunder. The first
character of the disc's directory name in PiFS is its disc number (e.g. '0').
So if disc 0 is called 'PIBRIDGE-00', there will be a directory '0PIBRIDGE-00'.

Basically you need to identify a directory for each virtual fileserver which
has permissions that the bridge can read and write from, and into which it will
store the fileserver's files. The stock installation will, as above, create one
in your home directory - but you can move it elsewhere, or even have a
partition for each server, or even each FS "disc" if you want.

Within that directory you need to create directories for each disk the virtual
server will present. The install routine will do this for you within the
installer's home directory. However, for example, say (i) you use the directory
/econet (with appropriate permissions) for your filestore, and (ii) you want
disk 0 to be named ECONET, you would create a folder 

	0ECONET

(note the leading 0 for disk 0) within /econet, so that it's full path would be
	
	/econet/0ECONET

If you want a second virtual disk (up to 16 - numbered 0 to F) you could create
disk '1' named 'STORAGE' as follows

	/econet/1STORAGE

It is unnecessary to have contiguous numbering - the bridge FS will find all
the disks from 0 to F whether they exist or not.  If you thus only create disks
0, A and F, they'll be found.

You can mount each disc as a separate filesystem if you wish. The FS code will
ignore the lost+found directory. Mounting each one separately is really just a
nicety because it will cause the FS to report an actual size on *FREE instead
of the maximum. If you create, for example, a filesystem contained in a
partition or regular file which is only, say, 30Mb long, and mount it on
/econet/1STORAGE then *FREE will show STORAGE as being 30Mb instead of some
massive modern figure.

If your installer user is 'econet', you can create the set of storage locations
above with the sample commands below, whilst logged in as (or sudo'd to) root:

	mkdir /econet 
        mkdir /econet/0ECONET 
        mkdir /econet/1STORAGE

	chown -R pi /econet

(The default 'make install' will put a hierarchy like that in your home 
directory ready - but you can move it where you like in the filesystem, or
create a complete new one. Or several if you are implementing several
fileservers!)

The fileserver translates certain non-Linux-friendly characters in filenames so
that they can be stored. It also handles high-bit characters used by Archimedes
class machines in filenames.

The version of the FS in v.2.1 also handles long filenames.  See the
documentation below about *FNLENGTH

On first execution, if Passwords does not exist it will be created with one
user 'SYST' with a blank password.

SYST will not have bridge privileges (i.e. the ability to use *FAST) by
default. To enable that, you need to use the --enable-syst-fast switch to
econet-hpbridge. That will enable *FAST on all system privileged users on all
fileservers presently configured. (So temporarily comment out any servers you
don't want it to happen to before you use the option!)


Storage of file attributes in PiFS 
----------------------------------

File attributes (load, exec, owner, privilege) are stored in the extended
attributes of each file and directory. If you are using a filesystem which does
not support extended attributes (such as NFS) then there is a way to make the
PiFS use .inf files instead.

If your filesystem does not support extended attributes then you can force the
FS to store the attributes in a separate .inf file for each stored file by
creating a file 'auto_inf' in the server root directory. Thus if your FS uses
/econet as its root, just create a blank file /econet/auto_info and the FS will
cease to use extended attributes and instead use .inf files.

	touch /econet/auto_inf

Thus a file !BOOT will have a corresponding !BOOT.inf file with its file
attributes contained within it.

If you wish to switch from xattr to .inf files, there is a utility
xattr_to_dotfile in the utilities folder which should help. It takes a filename
(or wildcard) as a parameter, reads the xattrs and writes out the corresponding
.inf file. 

The .inf files do not show in directory listings on client stations.


CLI commands implemented in the PiFS 
------------------------------------

These are commands which exist within the PiFS itself as opposed to being
library utilities.


Non-privileged commands:

*ACCESS <filespec> <attr>
	- Change attributes on <filespec> which can be wildcard
	- attr must contain LHWR before the /, and only WR after (or some
	  subset of each).
	- If no / provided, all attr letters presumed to relate to owner.
	- Letters after the '/' are for non-owner (public) access.
	
*BYE
	- Log out

*CDIR <dirname>
	- Create new directory

*CHOWN <filename>
	- Take ownership of <filename> if you own the directory it's in or are
	  a system user

*COPY <source> <destination>
	- Source can be wildcard. If it resolves to more than one file, then
	  <destination> *must* be a directory
	- Done inside the server - does not use network time.

*DELETE <filespec>
	- Delete files matching wildcard specification given
	- Will refuse to delete locked files, and directories which are not
	  empty.

*DIR <directory>
	- Change current working directory

*I AM (<station>) <username> (<password>)
	- Log in

*INFO <filename>
	- Show load, execute, length & system internal name for one file
	- Abbreviated to *I.

*LIB <directory>
	- Temporarily change library directory

*LOGIN
	- As * I AM

*OWNER <filename>
	- Display owner name as an error

*PASS <old password> <: or new password>
	- Change password

*PRINTER <printer>
	- Select one of several printers on the fileserver. Note, this command
	  only works if your print server is also a fileserver, because the
          *PRINTER command operates only on printers which are configured on 
          the same local server as the fileserver the user is logged into. This 
          mirrors what I understand to be the SJ Research functionality of the 
          command.  

          ALSO only works if the SJ functionality is turned on (which is the 
          default).

*RENAME <old filename> <new filename>
	- Does what it says on the tin.
	- Can be abbreviated to *REN.

*SDISC <discname>
	- Select different fileserver disc.
	- (The library utility *DISCS should show a list)

*SETLIB <dir>
	- Set your library directory. Effective from next login.
	- Setting the directory to % removes the setting and gives you the
	  system default library.


Privileged commands:

*BRIDGEUSER <+/-><USERNAME>
	- Set (+) or clear (-) bridge privilege for a given username
	- Cannot be done on own username
	- Only available to users who already have the bridge privilege
	- The bridge privilege allows access to *FAST on a given virtual server
	  in the bridge, which enables various special fileserver functions
          and, if the bridge is setuid root, enables an administrator to shut 
          down the Pi.

*DISCMASK <USERNAME> <ALL | NONE | xxxx>
	- Hides disc availability on the server from a particular user.
	- The system will *never* hide the user's home disc, whatever you
	  attempt to do with this command.
	- 'ALL' will hide everything except the home disc
	- 'NONE' will hide nothing
	- 'xxxx' is 4 hex digits representing a 16-bit mask with one bit per
	  disc. So bit 0 is disc 0, bit 1 is disc 1, bit 2 is disc 2, etc.

          e.g. to hide discs 4 and 9 only, set the mask to 0210 (which has 
          bits 4 and 9 set). Remember the discs are numbered from 0. 

	- If you have modified the code and have more than 16 discs (last
	  number 15 therefore), you can't hide the ones beyond number 15
          because the bitmask is only 16 bits long.

*FLOG <station>
	- Force log a station off

*FNLENGTH <length>
	- Change maximum filename length in the fileserver to which the command
	  is addressed. Valid values are 10..80. 
	- This operates immediately without a restart, and the value you set is
	  stored persistently in the configuration file for the particular FS
          upon which it is used so that it is not necessary to re-run the command 
          on a restart

*LINK <source> <destination>
	- Create symlink in the filesystem. <destination> will be the identical
	  file to source.
	- Note that the system will automatically set the L attribute on the
	  original file to remind you not to delete it, but it will show on all
          the linked copies too. Take care - if you remove the underlying file, 
          you will likely get a Seg fault when accessing any of the links.
	- This is all rather experimental.
	- Also, the file interlocks (which are implemented!) will not notice
	  one user opening the original file for writing and another opening a
          link for writing.

*NETCONF <+/-OPTION>
	- (This may be disabled at present - not sure why.)
	- Turns FS options on/off. These persist across restarts.

	- The list is:
	
	*NETCONF +ACORNHOME / *NETCONF -ACORNHOME 

            Turns Acorn home directory semantics on/off When on, a user will 
            be treated as owning everything in and below their home directory 
            and everything below it regardless of how ownership is actually 
            set in the permissions.

        *NETCONF +MDFS / *NETCONF -MDFS 

            Turns SJ MDFS functionality on off.  (Previously this was global 
            across all fileservers running on a particular bridge.)
	
        *NETCONF +COLONMAP / *NETCONF -COLONMAP 

            Maps '/' in Acorn filenames to '.' in Unix instead of the default 
            ':'. Inf files (which are used in place of xattrs if they are 
            unavailable) will be :inf instead of .inf . If enabling COLONMAP, 
            it will be necessary to rename any .inf files which already exist. 
            It is better to enable this persistent option before any files are 
            created.

            One way of doing that is this:

            cd <path to fileserver root directory> find . -type f -name \*.inf -exec <path to repo/utilities/dot_to_colon {} \;

        *NETCONF +BIGHANDLES / *NETCONF -BIGHANDLES 

            Turns on client handles other than the 8 which only a single bit 
            set in the byte. The default (off) is compatible with NFS3 on 
            BBC Bs, whereas arbitrary numbered handles are not and will cause 
            problems. Only turn this on if you have NO NFS 3 systems talking 
            to the bridge. ADFS (on any platform) should be fine with BIGHANDLES 
            enabled.

         *NETCONF +MDFSINFO / *NETCONF -MDFSINFO 

             Turns on longer *INFO output - essentially includes the date of 
             last status change (there being no create date in the statbuf, 
             in addition to modification date and time.

*NEWUSER <username>
	- Create new user.
	- This now DOES create a home directory $.Username on the first disc
	- And will set its ownership up correctly
	- Note that you can change a user's home directory with *SETHOME
	- but that will NOT change ownership - a user can thereby have 
	- a home directory they do not own.

	- NOTE: If you turn on the ACORNHOME option (*NETCONF +ACORNHOME)
	- then Acorn Home directory ownership semantics will apply, and
	- the user will be treated as owning everything below their
	- home directory, whether the FS thinks they really own it or 
	- not.

	- To delete a user, see *PRIV

*PRIV <user> <priv>
	- Set user privilege. 

          Those marked '+' can be prefixed + or - to turn on/off

          Applicable privileges are: 

          D - Deleted - user cannot log in, password entry will be reused 
        + L - Locked user - cannot log in (- variant returns to U)
          N - Unlocked (normal) user, but cannot change password 
        + S - System user (- variant returns to U)
          U - Unlocked (normal) user 

       - Set user functionality 

        + C - ("chroot") - user's home directory will appear to them as $ 
              If using this, any library or other directories the user needs 
              to see will need to be copied or linked (see *LINK) into their 
              home directory or they will not be accessible. This will only  
              apply on their home disc.  To hide all discs except home, 
              so that the user sees their home directory as the only thing 
              available on the fileserver, see *DISCMASK above 

          R - ("normal Root") - undoes 'C' - user will see disc root 
              directory as $ 

        + H - Hide other users in user list (*USERS) Can have the ffect 
              (especially with 'C' above and *DISCMASK) of making the user 
              appear always to be the only one using the server, on the only 
              disc with only their files on it.  

          V - Reveal other users in user list (*USERS) 

        + A - Turn on ANFS name bodge. This causes the FS to spot filenames 
              beginning '[0-9].' and insert a : on the start of the name. ANFS 
              appears to strip colons in those circumstances - probably 
              deliberately but it breaks some games designed to work on DFS or 
              ADFS. The priv also causes the normalizer to recognize a digit 
              after the colon as a disc number instead of a name. 

              CAUTION: risks opening unintended files if not used with 
              Very Great Care.  

          B - Turn off ANFS name bodge.

	+ O - Prevent user from changing boot option
		
*REMUSER <username>
	- Removes the user specified. 
	- What this actually does is emulate *PRIV <username> D
	- It does NOT remove the home directory, since they can be shared

*RENUSER <old username> <new username>
	- Renames the user named 'old username' to 'new username'
	- Will not allow renaming of the logged-in user

*SETHOME (<username>) <directory>
	- Permanently set replacement home directory (effective next login)
	- If <username> omitted, works for the calling user.
	- Otherwise operates on the named user if they exist.
	- <directory> can include a :DISC prefix

*SETLIB (<username>) <directory>
	- See above. System users may specify the optional username.

*SETOPT <username> <option>
	- Set specific user's boot option. <option> is a digit.
	- This will change the option immediately, but will only
	  take effect at next user logon. Further, since logged
	  on stations cache the option they were given at login,
	  catalogue headers from a user who is logged in when
	  this command is used will *not* change the visible
	  "Option xx (Off/Exec/etc.)" text. However, the option
	  will have changed. (The reason the option changes
	  when the user does *OPT4,X is that the local machine
	  updates its cache. It has no means of doing so
	  when *SETOPT is used, because the station is not
	  notified that the option has changed.)

*SETPASS <username> <password>
	- Set password for another user

*UNLINK <link>
	- Removes a symlink created with *LINK


SPECIAL FILES 
-------------

There are three special files which exist in every directory on every FS, but
only for users with SYST privileges. They are as follows:

%PIPASSWD	The FS password file, in PiFS format, for this FS

%PASSWORDS	The FS password file, in MDFS format, for this FS

%CONFIG		Readable FS config for this FS (e.g. will show you
		the current settings of each of the NETCONFIG variables)

SPECIAL CHARACTERS
------------------

Where a filename presented by a client begins with one of the following
special characters (whether alone, or with a path following it), the FS
will infer that the user wants to address a relative pathname as follows:

@	User working directory
&	User home/root directory
%	User library directory

For example, cataloging as follows is the equivalent of *LCAT on ANFS:

	*.%

The following will open a file underneath the URD:

	X = OPENIN("&.SUBDIR.FILE")

And if the user's working directory is $.USER.WORK and they execute
the following command, it is equivalent to "*.$.USER.WORK.SUBDIR"

	*.@.SUBDIR


*FAST 
-----

The MDFS *FAST utility was used to access an administrative menu inside an MDFS
server when it was in a particular mode by a keyswitch. The HP Bridge will
respond to *FAST when it is running, and will present a menu of options to
control both the local fileserver on a particular virtual station, and to be
able to shut down the Pi itself if the binary is setuid root.

However, access to this functionality is only available:

- On virtual servers which are running a fileserver
- To users who are logged into the fileserver AND who have a special 'bridge'
  privilege.

By default, no users (including SYST) have the bridge privilege.  To cause all
local fileservers to grant the bridge privilege to SYST on startup
(permanently), run the bridge from the command line with the --enable-syst-fast
command line option. This is only required once.

To grant the bridge privilege to another user, use the privileged command
*BRIDGEUSER (see below). You cannot modify the bridge privilege of the user who
executes that command - you can only modify the privilege for other users. It
is possible to grant the bridge privilege to a non-system user, but such a user
will not be able to grant or revoke the privilege for anyone else because
*BRIDGEUSER requires SYST and BRIDGE privileges to function.

On login as a user with the bridge privilege, the FS will notify the bridge
that *for that virtual station only*, the user's station has bridge privileges.
Thereafter the bridge will respond to the *FAST utility from that particular
user's station and only in respect of the virtual fileserver station that they
logged into. 

On logout, that flag will be cleared.

Since the *FAST handler in the bridge allows the shutting down of the
fileserver, the notification above allows a bridge privileged user to log in,
use *FAST to shut the fileserver down, change its parameters (e.g. rename a
disc or format a new disc) and then, even if they quit *FAST, providing no
other programme has been loaded, they can re-execute the *FAST code by using

CALL &2800

from BASIC. The bridge will, because of the notification system above, still
know that the station has bridge privileges even though the fileserver has been
shut down. The fileserver can, for example, then be re-started.

It is therefore important that users with bridge privileges log out properly
with *BYE so that the relevant notification bit is cleared and a subsequent
user cannot log in. The bit is NOT cleared on a logout caused by, for example,
*FLOG.

The *FAST handler can only shut down the Pi if the econet-hpbridge utility is
setuid root. In that regard:

- The binary will drop its root privileges immediately on startup, and will
  only re-obtain them when it has fork()ed in order to run the shutdown
  programme.

- If the binary is not setuid root, the shutdown option will do nothing.

- To install the binary setuid root, use the following instead of make install
  each time you build / install

  make setuid


THE END 
-------

Enjoy!
