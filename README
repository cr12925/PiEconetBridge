AUN to Econet Bridge
--------------------


/*
  (c) 2021 Chris Royle
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

*/

THANKS
------

Two individuals, KL and IW (you know who you are) did extensive testing
of both the hardware and software involved in this project (aka trying
quite hard to break it!) in July and August 2021. I am very grateful to
them for their efforts.

The fileserver code in this repository would not have been possible to
develop without sight of the code at github.com/stardot/ArduinoFilestore.
I am told it is stardot.org.uk user @gazzaD - well, @gazzaD, thank you -
I could not have done it without you.

Introduction
------------

The combination of this hardware and software is intended to provide a
bridge between a real BBC Econet and the AUN world of BeebEm (and probably
other things which use AUN). It contains also contains a relatively operable
Level3-ish fileserver, and an emulation of an Acorn print server, capable
of use by both BeebEm and real BBCs.

It is possible to put two (or more) of these bridges 'back to back' and join
two real BBC Econets together over the IP network, including the Internet,
providing the correct ports are opened. The necessary ports are the ones you
configure in the configuration file.

It is unnecessary for the two networks in a 'back to back' configuration such
as that to have discrete Econet network numbers. Properly configured, all
stations can be on the same network number, including 0.

What is more, if you are connecting to your friends' Econets and some of them
use the same network number as you, you can configure their networks to 
have a different number in your config and it should all work, thus the
overlapping network numbers no longer matter.

At the moment, each individual host on each individual network must be 
individually configured. There is a work in progress to provide a 'trunk'
system (with network number address translation). Examination of the code may
show you how the configuration can be done - but in this version, whilst the
configuration lines are read and understood by the bridge, in fact there is
*no code* implementing that functionality at all - so don't bother trying.

What is is NOT
--------------

Whilst called a 'Bridge', do *not* mistake this for a direct substitute for
an Acorn(R) Econet bridge, which will join two real BBC networks together
with different network numbers. You *can* do that with this software and
its associated hardware, but you need TWO sets to do it, and the 'bridge'
is performed over AUN over IP in between the two bridges.

Caveat: The bridge query handling code in this software is a work in progress.
It doesn't do very much, and (for example) it does not broadcast known
'bridgeable' networks to other bridges yet. This is because I cannot test it
with a real Acorn bridge because I do not have one! However, that does *not*
appear to stop stations communicating with distant network numbers.

Prerequisites
-------------

The system will require:
	- Raspberry Pi 4B (anything less and timing issues mean it won't work
          at the moment, but I am working on it!)
	- A proper RPi 4 PSU. Experimentation shows that the Econet hardware
          has quite a current draw and an underpowered PSU can lead to
          rx/tx problems
	- No other GPIO usage on the system
	- Do NOT install the Pi desktop - or if you do, don't run it.
	- The hardware (see Hardware.pdf), which in turn requires a Master 128
          Econet board
	- Your installation of PiOS having the kernel headers installed (see
          below)
	- A pre-existing functioning Econet (with clock) with a spare station
          port to connect to the hardware

WARNING - NO, REALLY, YOU SHOULD READ THIS!
-------------------------------------------

I was once told that the difference between a professional musician and an the
amateur is that the amateur practices until he gets the piece right; the
professional practices until the piece simply will not go wrong.

On any view, by analogy, this is amateur code.

This is work which I have produced with no real experience of either
electronics, the 68B54 ADLC, or kernel module programming.

In particular, the following undesirable characteristics of this system should
be noted. These are typically owing to a lack of talent on my part. I well
understand the desirability of fixing them all. If anyone with more talent
than me wishes to have a go, I would be genuinely very happy. Notwithstanding
the list below, I am a huge fan of doing things the 'proper' way. It is a
matter of regret that I have not managed to do so. In particular:

	- It reads and writes directly from the GPIO hardware instead of using
	  the kernel routines. I accept this renders it less portable even
	  within Raspberry Pi systems, though at least the Peripheral Base
	  address is in a #define!

	- It probably does not handle AUN ACK and NAK quite the way it should.

	- It does not use ..._probe to load the module when it probably ought
	  to.

	- It does not use the Device Tree when it really should. I can only say
	  that I tried for a very long time to work out how to do that from a
	  standing start, and I got a little way but became lost. I would be
	  very pleased if anyone can explain.

Whilst the bridge appears to be relatively reliable, e.g. for a realy BBC
accessing a file or print server on an emulator (e.g. BeebEm), and vice versa,
there are some wrinkles which periodically crop up:

	- Sometimes the AUN state machine in the kernel gets out of step -
	  probably because of a lost packet. The solution is to quit the bridge
	  in userspace (see below) and remove & reinsert the kernel module.

	- I have had a couple of occasions where an Acorn fileserver has
	  changed all directory permissions to "DL/" when using the bridge, and
	  even creates new directories with that permission, and will not allow
	  a change back to DWR/ for example. I do not know whether this is
	  something in the bridge, or something in the Level 3 FS.

	- Sometimes the kernel module gets stuck unable to transmit. Solution
	  as for the AUN state machine.

It is some time since I saw a kernel crash with this module, but you should be
alive to the prospect that it might happen. If you use this on a production
system that's doing something else, you have been warned!

INSTALLATION
------------

1. Install your kernel headers. On PiOS that requires the following (prepended
   by 'sudo ' if you are not root):

	sudo apt install raspberrypi-kernel-headers

2. Get the distribution of the bridge code. It comes in three main sections:
   kernel module, utilities, configuration

3. Build the kernel module

	cd module
	make

4. Build the utilities

	cd utilities
	make

5. Edit the configuration file (sample in config/econet.cfg) and put it in
   /etc/econet-gpio/econet.cfg

   Note: If you want to put it elsewhere that's fine - just use the '-c' option
   when running econet-bridge (see below).

   (Neither the kernel module nor the other utilities use the configuration
   file.)

LOADING THE KERNEL MODULE
-------------------------

	cd module
	sudo insmod ./econet-gpio.ko

If you are not running the utilities are root, you should change the
permissions on the newly arrived /dev/econet-gpio, e.g.:

	sudo chmod a+rw /dev/econet-gpio

If you want to choose the group / permissions for the /dev/econet-gpio device,
you can put a file such as that in the 'udev' directory into /etc/udev/rules.d

Obviously if you want to use the group 'econet' as set out in the example file,
then you will need to create it as root with something like

	groupadd econet

And then add the pi user to it with something like

	usermod -a -G econet pi

You should then find that the pi user can run the utilities (rather than root)
but can still talk to the Econet device.

A WORD ON THE KERNEL MODULE
---------------------------

The kernel module does two things:

	- First, it transmits and receives packets through the ADLC.
	- Second, it implements a state machine which does the 4-way handshake
	  and converts data packets off the wire into AUN-style packets.
	  (Internally, and when communicating with the utilities, it adds an
	  extra four bytes on the start of each packet which match those on an
	  Econet frame to make it easier to work out where a packet is going,
	  viz.  destination station, destination network, source station,
	  source network (in that order).
	
	  Similarly, any packet delivered to the kernel module when it is in
	  AUN mode must have those four extra bytes on it.

The AUN (4-way-handshake) mode is enabled when a 'station set' is delivered to
the kernel module. The station set map tells the module which stations it
should handshake for, or otherwise capture traffic for (e.g. immediates, 
broadcasts). Only stations which appear in the map (and there are macros to put
stations in the map) will have their traffic forwarded to userspace when in AUN
mode.

If no station map is put into the kernel module after a reload or reset, the
module will remain in non-AUN mode. In that mode, it captures all packets off
the wire, and does *no* 4-way handshake. It simply delivers raw packets through
/dev/econet-gpio to userspace. This mode is not useful practically, but
provides a means of doing network monitoring. Thus the 'econet-monitor'
utilities does not upload a station map, so that the module remains in 'raw'
mode.

The other thing to appreciate is that because a reply to an immediate query on
the hardware econet has to be provided faster than it possibly could be if the
query were sent out over AUN/UDP, a reply collected, and then delivered to the
wire, the kernel module does the immediate replies for 'distant' and 'local'
stations (as to which see below: they're the ones which are not physically
attached to the Econet wire itself). It responds only to a selection. In fact,
in AUN only 'Machine Peek' is implemented in the real world. However, the
kernel module will respond to a MachinePeek with machine type &EEEE (unusued
in the current list) and version 0.1. It will 'sink' continues and halts by
acknowledging them on the wire, but will ignore all other types of immediate
(e.g. memory peek, memory poke, JSR, User subroutine call etc.).

Thus if, on a real BBC on the Econet, you run a BASIC programme which does a
Machine Peek to an AUN station elsewhere, you will (falsely) be told is it
machine type &EEEE running version 0.1 of the network software. In the future,
it may be possible to make the bridge code in userspace collect all the Machine
Peek responses from stations it knows about, and feed them to the kernel module 
to respond by proxy. It is probably unnecessary, and I haven't done it yet.

TESTING - HARDWARE
------------------

If, like me, you've built the hardware on a breadbaord, you should probably
test it before trying to use it. 

There is a utility 'econet-test' which puts the hardware through a test
routine whose results will require an oscilloscope to see. Essentially it
toggles the various address, control and data lines onto the 68B54 ADLC.

To use it, you must first load the kernel module since the kernel module does
the heavy lifting in this regard. See above.

To run the tests:

	cd utilities
	./econet-test

You will see a series of prompts which tell you which lines have been set and
in what way so that they can be checked with the scope. Press return or some
other key after each one to move to the next.

It is *not* recommended you do this with the Econet actually connected to the
module until the very last step.

The last stage is that the test harness will repeatedly use a kernel ioctl()
to send a test packet onto the Econet. You will therefore need to put your
scope on the Data+ and Ground pins on the Econet connector itself to see if the 
packet is transmitted.

Note you will need a clock - the chip will not transmit otherwise.

The test packet is a 'machine peek' immediate query from 0.254 to 0.1. If
station 0.1 is alive on your particular network, it should reply and you should
see two packets in quick succession on the scope. If not, you should just see
one (the test packet itself). 

This last test phase repeats until you press Q and then Enter (case sensitive)
so that you can test repeated transmissions.

If there is a problem, watching the kernel ring buffer (dmesg -we) may give you
a clue why.

THE UTILITIES
-------------

These run from simple to more complex. Each responds to -h on the command line
to give you help.

econet-monitor
--------------

First, econet-monitor. This reads /dec/econet-gpio with the kernel module in
raw mode and simply dumps every packet it sees.

You should see streams of packets (on an active network) which will include all
four packets (separately) of the four-way handshakes. This utilities does *not*
glue them together into one line like Acorn's own NETMON. You literally see
what's on the wire.

The output is verbose by default. You can get a one-line-per-packet (ish)
output by specifying '-b' (brief) on the command line.

One easy way to see some traffic is to run the monitor on a live econet and
press BREAK on a real BBC with the network software loaded. Certainly on a 
Master (which is all I have), the ANFS will send 9 bridge queries out. These
are short broadcasts whose packet data includes the word 'BRIDGE' and you
should see them appear on the monitor screen.

econet-imm
----------

This utility performs various sorts of 'immediate' queries on the econet. It
leaves the kernel in raw mode, sends the query and reads the next packet off
the wire and (save for the continue and halt operations) tells you what was in
it.  

It implements the following operations: Halt, Continue, Machine Peek, Memory
Peek.

In every case you *must* provide a source and destination station number. They
will both be treated as being on net 0 for the purposes of this utility, so
only local stations can be queried (i.e. not those over traditional Econet
bridges). Obviously your own source station number should not already be in
use on the network.

Examples (but see help for detail) with example output:

Send machine peek to station 1 from station 250

$ ./econet-imm -s 1 -d 250 -m
Station reports being a BBC Master 128 OS 3, NFS version 4.25.
$

Send HALT to station 1 from station 250

$ ./econet-imm -s 1 -d 250 -j
$

Send CONTINUE to station 1 from station 250

$ ./econet-imm -s  1 -d 250 -c
$

Send memory peak to station 1 from station 250 for addresses &2000 to &21FF

$ ./econet-imm -s 1 -d 250 -p -q 2000 -r 21FF
Remote memory peek received:
00002000 78 56 34 12 d0 04 a9 d4 d0 18 18 20 c3 20 20 3a 21 20 48 21 d0 0c 20 0f 22 d0 07 20 7a 22 d0 02 xV4........ .  :! H!.. .".. z"..
00002020 a9 00 48 a0 04 ad 6b 8c 91 b0 c8 ad 6c 8c 91 b0 c8 ad 72 8c 91 b0 68 4c 60 18 20 7d 1a a0 06 b1 ..H...k.....l.....r...hL`. }....
00002040 b0 20 4c 11 d0 0f 20 8d 1d d0 0a a0 09 b1 46 29 02 d0 04 a9 c1 d0 69 38 20 c3 20 ad 72 8c f0 3c . L... .......F)......i8 . .r..<
00002060 18 a0 00 b1 7c a0 09 71 b0 8d 6f 8c c8 b1 b0 a0 01 71 7c 8d 70 8c c8 b1 7c 69 00 8d 71 8c 18 a9 ....|..q..o......q|.p...|i..q...
00002080 ff 6d 6f 8c a9 04 6d 70 8c 8d 70 8c a9 00 8d 6f 8c 6d 71 8c 8d 71 8c 20 25 1d d0 24 a0 09 b1 b0 .mo...mp..p....o.mq..q. %..$....
000020a0 8d 6d 8c c8 b1 b0 8d 6e 8c 20 3a 21 20 7f 21 d0 0f 20 13 22 d0 0a 20 a8 22 d0 05 20 b0 23 a9 00 .m.....n. :! .!.. .".. .".. .#..
000020c0 4c 60 18 a9 00 8d 72 8c a0 09 b0 03 a0 06 38 b1 7c c8 8c 66 8c a0 00 f1 7c 8d 6d 8c ac 66 8c b1 L`....r.......8.|..f....|.m..f..
000020e0 7c a0 01 f1 7c 8d 6e 8c ee 66 8c ac 66 8c b1 7c a0 02 f1 7c b0 08 a9 00 8d 6d 8c 8d 6e 8c d0 18 |...|.n..f..f..|...|.....m..n...
00002100 38 ad 6d 8c a0 09 f1 b0 8d 66 8c ad 6e 8c c8 f1 b0 0d 66 8c f0 12 90 10 a0 09 b1 b0 8d 6d 8c c8 8.m......f..n.....f..........m..
00002120 b1 b0 8d 6e 8c 4c 2d 21 a9 80 8d 72 8c ad 6d 8c 8d 6b 8c ad 6e 8c 8d 6c 8c 60 a0 07 b1 b0 8d 69 ...n.L-!...r..m..k..n..l.`.....i
00002140 8c c8 b1 b0 8d 6a 8c 60 20 b9 21 c9 00 d0 03 a9 00 60 8d 66 8c 20 77 1e d0 f7 ad 69 8c 85 24 ad .....j.` .!......`.f. w....i..$.
00002160 6a 8c 85 25 a0 00 b1 7c 18 65 28 85 22 a5 29 69 00 85 23 ae 66 8c 20 59 07 20 d2 21 4c 4f 21 20 j..%...|.e(.".)i..#.f. Y. .!LO!
00002180 b9 21 c9 00 d0 03 a9 00 60 8d 66 8c 20 77 1e d0 f7 ad 69 8c 85 22 ad 6a 8c 85 23 a0 00 b1 7c 18 .!......`.f. w....i..".j..#...|.
000021a0 65 28 85 24 a5 29 69 00 85 25 ae 66 8c 20 59 07 20 67 07 20 d2 21 4c 86 21 a9 00 38 a0 00 f1 7c e(.$.)i..%.f. Y. g. .!L.!..8...|
000021c0 4c c3 21 ae 6e 8c f0 01 60 cd 6d 8c 90 fa ad 6d 8c 60 38 ad 6d 8c ed 66 8c 8d 6d 8c ad 6e 8c e9 L.!.n...`.m....m.`8.m..f..m..n..
000021e0 00 8d 6e 8c 18 ad 69 8c 6d 66 8c 8d 69 8c ad 6a 8c 69 00 8d 6a 8c 18 a0 00 b1 7c 6d 66 8c 91    ..n...i.mf..i..j.i..j.....|mf..
$

Note the first four bytes at &2000, which were put there on the real BBC with
station number 1 with the following BASIC comment:

!&2000=&12345678

econet-bridge
-------------

This is the main bridge code, though it is relatively simple. It uses a
configuration file which tells it about three key types of station: Wire (on
the hardware Econet), Distant (AUN stations accessible over IP) and Local
(emulated within the bridge code itself).

First, the config file. The documentation is contained in comments in the
sample. Please read it.

The bridge code looks for the config file in /etc/econet-gpio/econet.cfg by
default, but the -c switch allows you to specify an alternative.

Notes on each type of configuration line:

N n
---

This sets the network number of the local wire Econet which the bridge will
(when the Bridge Query code is finished) be announced to other bridges. If you
don't have this, the bridge won't deal with bridge queries. This will not stop
it bridging network 0 (your local Econet) to AUN stations in network 0.

W n s p
-------

This creates an AUN listener on port p (on each IP address available on your
bridge machine) for host n.s on your local hardware Econet wire. (Note, because
you may have an Acorn bridge to another wired Econet, you can specify a network
other than 0.)

You must:

- Have one such entry for every station on your local Econet which needs to
  speak to the AUN world.
- Use different port numbers for each such entry. E.g. 32768, 32769, etc.
- If you use the word AUTO for the port number then it will automatically
  be calculated as 10000+network*256+port.  So, for example
    W 0 100 AUTO would result in port 10100 (10000+0*256+100)
    W 5 200 AUTO would result in port 11480 (10000+5*256+200)

  (Thanks to @sweh on stardot.org.uk for the above patch & suggestion.)

- If the station ID is a * (e.g. W 0 * AUTO) then the bridge will
  automatically define all unused stations as being wired, as if you had
  entered
    W 0 1 AUTO
    W 0 2 AUTO
    ...
    W 0 254 AUTO
  This entry should be last in the configuration file (definitely after any
  Server or Printer lines).
  e.g.
    F 0 254 AUTO /econet
    P 0 235 AUTO lp
    A 0 100 10.0.0.100 32768
    W 0 * AUTO
  would skip stations 100, 235, 254 because these are already defined, and
  define all the rest as wired.

Please see the section on "Advanced network configuration" in the NETWORK
file for another way of configuring port numbers, and which helps with
RiscOS AUN clients.

A word on port numbers
----------------------

Each Econet *wire* host or locally emulated station must have a *different*
port number because all of those stations are listened for on all IP addresses
on the local machine.

*Distant* machines - AUN hosts - e.g. BeebEm, or another bridge - can use
port numbers which appear to overlap with wire or local stations. That works
because in fact they do not overlap: the port is being listened for on the
*distant* machine, not the local bridge. 

E.g. the following configuration is perfectly good:

W 0 1 32768
W 0 2 32769
A 0 3 distant.example.com 32768
A 0 4 another.example.com 32768

... Whilst the port numbers on the 'A' lines are the same as for station 0.1,
they work because those 'A' systems are distant - they're on another machine
on the IP network. So the fact that they listen on 32768 just like we do for
station 0.1 is no problem.

A n s host p
------------

This tells the bridge that AUN host n.s is available on host 'host' (can be DNS
name or IP address) port p.

Please see the section on "Advanced network configuration" in the NETWORK
file for another way of configuring port numbers, and which helps with
RiscOS AUN clients.

The bridge will ONLY bridge to hosts you have told it about in this way.

L n
---

The bridge will dynamically assign a station number between 1 & 254 in network
'n' (which needs to be not in use elsewhere!) to AUN traffic received from
stations and/or on ports which are not defined with 'A' (above). 

The point is that this allows AUN machines not to *have* to be configured in
the bridge providing those AUN machines know where the bridge *is* and what
ports the wire/local stations are on.

Its purpose is to allow users (including local ones) to access the wired
Econet without them having to be configured on the bridge. For example, if
you have a fileserver (in the bridge or on the wired network) and you want
your friends to be able to access it, then providing they can reach the bridge
it is unnecessary to configure their IP addresses and port numbers in the
configuration file, in case, for example, they change because their ISP
provides a dynamic IP address.

Note that *no* filtering is done here - by definition, the bridge will let
allcomers in!

The bridge will time out a dynamic address if it sees no traffic for 1 hour.
This is not a configurable timeout, but it *is* in a #define in 
econet-bridge.c and you should feel free to change it if you want.

When the bridge allocates an apparently unused (including a timed out) 
station number to a new user, it will

 - tell all locally emulated fileservers to log the station off (in case
   they were logged on)
 - spoof an 'end session' command to any wired fileservers it has 
   detected traffic for (which it does by detecting traffic to port &99).

That is to prevent a newcomer accidentally inheriting access to a
fileserver from a previous dynamic user.
P n s p printer
---------------

The bridge will accept print jobs with a locally emulated print server on host
n.s port p. It will spool the output provided by the host (which can be another
AUN host as well as a real BBC on the Econet wire) into a temporary file, and
when completed it will despatch it using 'lp' to the printer named 'printer'.
By editing the header file include/econet-pserv.h you can alter the command
line format which is used and, if you wish, use an entirely different printing
command. Unfortunately, at present, there is one command per bridge - so all
virutalized print servers use the same command. I suppose it would be possible
to alter the configuration format simply to specify the command to be used on a
per-server basis.

Running the bridge
------------------

As long as the device has been made world writeable or is accessible by your
current user (e.g. by using the udev configuration and putting the device into
a group of which you are a member) (see above) you should be able to run the
bridge from a non-privileged user as follows:

$ ./econet-bridge

It will produce little output in this mode, save for errors.

The -h command line switch will give you help as to other things you can do. 

-c <path> : Use alternative config.
-d        : Produce packets on stderr as they come and go. These will be
	    AUN-type (i.e. not raw off the wire), post 4-way h/shake.
-b        : When specified with -d, produces abbreviated (~ 1 line per packet)
	    output.
-f	  : Stop the fileserver from producing log output to stderr.
	    (Incompatible with -n and if specified after -n will take
	    precedence.)
-l	  : Stops the bridge code talking to the Econet hardware. Useful
	    for testing, or if you just want to run a fileserver without any
	    connection to a wired Econet.
-n	  : Makes the fileserver log output noisy. Will tell you much more
	    about what it is doing, notably on file reads/writes/bulk
	    transfer. (Incompatible with -f and if specified after -f will
	    override it.)
-s        : Dump a summary of the config file before bridging - useful for
	    checking the config has been read.
-q        : Don't do bridge query responses (but the present version doesn't
	    anyway, so this achieves nothing).
-7	  : By default, the FS will use the '7 bit bodge' for dates to
 	    provide some Y2K compliance. This turns the option off and
  	    reverts to 'original' Acorn year numbering which tops out at 
	    about 1997.


EXAMPLE CONFIG & USAGE
----------------------

Suppose you have live stations 1 & 2 on the Econet, and a fileserver on an AUN
machine with IP 5.6.7.8 on port 32768.

Let us imagine the server is running BeebEm. Let us imagine that the Raspberry
Pi running the bridge has IP address 1.2.3.4.

Note that BeebEm MUST be in AUN mode and have SINGLESOCKET set to 1 (these are
default settings as I understand it).

The bridge configuration would be:
W 0 1 32768
W 0 2 32769
A 0 254 5.6.7.8 32768

The tail end of the BeebEm econet.cfg file would read thus:

0 1 1.2.3.4 32768           <--- Matches the port number on 'W 0 1 ...' above
0 2 1.2.3.4 32769           <--- Ditto W 0 2
0 254 5.6.7.8 32768

Make sure your BeebEm configuration includes an NFS ROM of some kind and Econet
is enabled in the options. Make sure BeebEm wakes up and doesn't complain about
not being able to find an Econet address.

Start up, e.g., a Level 3 fileserver in BeebEm.

Next, load the kernel module on the Raspberry Pi (see above).

Then run the bridge as above.

You should find your real BBC can log into the BeebEm Fileserver.

The reverse also works - logging into a real BBC fileserver (or potentially SJ
Research, but I don't have one) from BeebEm.

TRUNKING, FIREWALLING AND NETWORK ADDRESS TRANSLATION
-----------------------------------------------------

Examples of all of the following are in the sample config file.

Trunking: This allows you to configure a single host & port combination
which will receive all traffic for all hosts on particular networks. 

This saves having to specify all the hosts on a remote network and saves
each one having its own UDP port open at the other end.

Trunks learn which networks are where by sending and receiving bridge
reset (&80) and update (&81) packets. Every 5 minutes, the bridge will
do a full reset in case anything went wrong. In doing the adverts, it will
apply the address translation mapping for your local networks. It will
*never* advertise net 0, so to enable the functionality you *must* 
specify a local network number with 'N'.

NOTE: Traffic from other AUN stations WILL NOT be put on the trunk. That is
because those local AUN stations will not know where to send the traffic
for the distant networks.

The bridge *can* forward from one trunk to another. When it does so, it
disables its intelligent waiting routine which looks for replies to 
immediates and data packets, and leaves the distant ends to do it.

Each trunk has a manually configured number, starting at 1.

NOTE: Trunking CANNOT at present be used to bridge two net 0's together.
It may be that some clever learning process can be implemented at a later 
date, but for now it is not there. Don't try it, you will likely become
frustrated.

Address translation: It is considered helpful that, if two sites use
overlapping network numbers, they need not renumber in order to communicate
over a bridged trunk. Address translation (the 'X' configuration entry)
allows you to specify, on a per trunk basis, the local network number
and a different network number by which the local net is seen at the
far end of the trunk. E.g. 'X 1 2 3' will translate local network 2
to be seen as network 3 at the other end of trunk 1. The translation
is undone when traffic is received.

NOTE: Do not attempt to translate net 0. Always use you local network
number ('L' configuration entry) instead.

Firewalling: Sometimes it is useful to be able to stop remote stations
on a given trunk talking to particular hosts - e.g. development
machines, or private filestores. The 'Y' parameter allows you to
configure a per-trunk firewall system based on source network/host and
destination network/host. The default policy is ACCEPT. The rules are
executed in order each time a packet arrives.

NOTE: Firewalling is only done INBOUND. There is no outbound filtering;
you can send what you like. If the other end filters it, so be it.

NOTE: Network or host 255 is used as the wildcard to mean "anything".
It does NOT mean broadcast.

TO DO
-----

- Implement device tree so that the GPIO pins are defined outside the code
- Use better routines to access GPIOs in kernel
- Make the kernel module use ..._probe instead of ..._init

KNOWN BUGS
----------

- Kernel module occasionally needs reloading because the AUN state machine
  gets stuck. Seems to be rare thesedays though. YMMV.

PRINT & FILE SERVERS
--------------------

See below. It is possible to:

a) 	Run more than one file or print server within the same bridge.
b) 	Run the File and Print servers on the same emulated station. 

In case (b), the port number used will be ignored when the second station
definition is used.

Example:

F 0 254 32768 /econet
P 0 254 37000 matrix

Will create one fileserver rooted at /econet, and a print server, both on
station 0.254. However, the listener will be on 32768 - because by the time 
the print server config is read, station 0.254 already exists and has a 
listener on 32768, so the 37000 port number is *ignored*.

Equally, you can have two fileservers, but they must be on *different*
emulated stations, e.g.:

F 0 254 32768 /econet
F 0 253 32767 /filestore

THE PRINT SERVER
----------------

There is a rough and ready print server built into the bridge utility which
is usable by Econet stations (including on AUN) whether logged in or not.

Configuration line syntax is:

P n s port printer

... where:

n, s are network and station number. (The kernel module will listen for
traffic on the Econet wire.)
port is the UDP port to listen on for AUN traffic for this emulated service
printer is *either*

1.	The name of a printer queue configured with 'lpadmin' (as to which
	see its manual page

OR

2.	An email address. You will need a configured, working sendmail
	implementation on your Pi, with suitable mail routing/smart host.


If there is an @ symbol in the printer name, the bridge will assume it is an
email address. Avoid printer queues with @ symbols in them...

Example:

P 0 251 32768 matrix    
... will send received print jobs, with a header, to the 'matrix' queue, and

P 0 251 32768 user@example.com
... will email them in plain text to the given address

THE FILESERVER
--------------

The bridge code now includes what appears to be a relatively stable Level3-ish
fileserver. It implements most functions. THERE MAY STILL BE BUGS. YOU MAY
GET CORRUPTED FILES. YOU HAVE BEEN WARNED.

FURTHER IMPORTANT NOTE: No Library, Welcome or Utilities are provided with
this software. You will need your own and you will need to copy them onto
the system using something like COPYF. If you search the various enthusiast
sites, I am sure you will find them. COPYF should work to copy them to a 
newly created Library directory as SYST once you get the server up and running.

One function not implemented is user quotas. READFREE will return something,
but it will be erroneous. SETFREE will appear to complete but achieve nothing.

The server is *broadly* a Level 3-esque server. One day I will implement
the SJ Research addons. It has some differences:

 - It has permissions on directories which are typically enforced
 - There is a concept of an 'owner' for each file or directory. Whereas
   Level 3's semantics were that a user owned everything below their
   home direcotry, that is not so in this implementation. Ownership can
   be viewed with *OWNER, and changed with *CHOWN. 
 - Thus permissions on a file in your home directory as an ordinary user
   *may* be the ones *after* the / in the permissions if you don't
   own it.
 - Where the L3 server will not permit *DIR ^ within your home directory
   or $, this server *will*. From home it has the expected behaviour.
   From $ (or if $ is home) it will effectively be ignored.
 - One day there may be switches to turn some of this on and off.

Configuration file syntax:

F n s port dir

Where:

n, s are network and station number to emulate
port is the port to listen on for AUN traffic
dir is the top level directory for the server.

WITHIN 'dir' you MUST create at least one directory whose name is of the
format nNAME, where 'n' is a single digit 0-9 (which will become the disc
number in Econet world) and 'NAME' is the (up to 16 character) disc name
in Econet world

All those folders MUST be owned by the user that runs the bridge utility.

E.g. If you configure

F 0 254 32768 /econet

You would then:

mkdir /econet
mkdir /econet/0ECONET
mkdir /econet/1STORAGE

chown -R pi /econet

Start the bridge, and you should see it initialize the fileserver. 

The password file will NOT be visible on the main discs. It is stored in the
top level directory - in the example, /econet/Passwords

On first execution, if Passwords does not exist it will be created with one
user 'SYST' with a blank password.

All the Econet files are then stored in the Linux filesystem. Filenames are
subject to conversion of '/' (which is permissible in a BBC filename) to ':'
(which is not) so that individual filenames do not attempt to straddle Linux
directories. 

By default, Load, Execute and Econet owner are stored as extended attributes,
so you need to make sure your filesystem supports them. Ext4 does by default
on the standard Pi installation.

If your filesystem does not support extended attributes then you can use the
-x flag to disable this, and instead the attributes are stored an in "inf"
file.  So a filename !BOOT would have an additional !BOOT.inf that stores the
four values.

This mode can also be enabled by creating a file called auto_inf in a
server directory.  So, for example, if you have
  F 0 254 32768 /econet
then if the file /econet/auto_inf exists then it will automatically
apply -x mode, and this will show in the log
  FS: Attempting to initialize server 0 on 0.254 at directory /econet
  FS: Automatically turned on -x mode because of /econet/auto_inf

Even on a filesystem with extended attributes enabled, if an inf file is
found then this will be used in preference, so !BOOT.inf will be used if
it exists.


You can mount each disc as a separate filesystem if you wish. The FS code will
ignore the lost+found directory.

Most things work. There is some weird problem with the Get Object Info
FS function which, it would appear, is actually used to SET load/execute
in certain circumstances, but I have not figured out how to tell when that is
so. The "COPYF" utility appears to do this, for example.

Wildcards
---------

I have implemented the * and # BBC wildcards best I can. I think they work.
If you get odd results, please post somewhere and if I get to hear about it
I will try to investigate when I can.

Permissions
-----------

More complex than Level 3. Directories can have WR attributes as well,
and a lack of write access to a directory ought to prevent creation of 
a new file / directory therein.

There is an 'H' attribute which hides the file from directory listings for
all but the owner & system users.

The 'L' attribute does what the Acorn one does. However, if you use the
*LINK functionality (see below), the FS will automatically set the L attribute
in the hope that it will remind you that one of the apparently identical files
is the *actual* unix file because if you delete that one, things will go 
haywire. (There is a need for some sanity checking there - be prepared for
seg faults if you push this too hard.)

Special files
-------------

System privilege users can open the file %Passwords in any directory
and will receive a handle to the system passwords file which is not in fact
accessible in the Econet directory hierarchy.

CLI commands implemented in the server
--------------------------------------

Non-privileged commands:

*ACCESS <filespec> <attr>
	- Change attributes on <filespec> which can be wildcard
	- attr must contain LHWR before the /, and only WR after (or some
	  subset of each).
	- If no / provided, all attr letters presumed to relate to owner.
	- Letters after the '/' are for non-owner (public) access.
	
*BYE
	- Log out

*CDIR <dirname>
	- Create new directory

*CHOWN <filename>
	- Take ownership of <filename> if you own the directory it's in
	  or are a system user

*COPY <source> <destination>
	- Source can be wildcard. If it resolves to more than one file, then
	  <destination> *must* be a directory
	- Done inside the server - does not use network time.

*DELETE <filespec>
	- Delete files matching wildcard specification given
	- Will refuse to delete locked files, and directories which are not
	  empty.

*DIR <directory>
	- Change current working directory

*I AM (<station>) <username> (<password>)
	- Log in

*INFO <filename>
	- Show load, execute, length & system internal name for one file
	- Abbreviated to *I.

*LIB <directory>
	- Temporarily change library directory

*LOGIN
	- As * I AM

*OWNER <filename>
	- Display owner name as an error

*PASS <old password> <: or new password>
	- Change password

*RENAME <old filename> <new filename>
	- Does what it says on the tin.
	- Can be abbreviated to *REN.

*SDISC <discname>
	- Select different fileserver disc.
	- (The library utility *DISCS should show a list)

*SETLIB <dir>
	- Set your library directory. Effective from next login.
	- Setting the directory to % removes the setting and gives you
  	  the system default library.

Privileged commands:

*FLOG <station>
	- Force log a station off

*LINK <source> <destination>
	- Create symlink in the filesystem. <destination> will be the identical
	  file to source.
	- Note that the system will automatically set the L attribute on the
	  original file to remind you not to delete it, but it will show on 
	  all the linked copies too. Take care - if you remove the underlying
	  file, you will likely get a Seg fault when accessing any of the links.
	- This is all rather experimental.
	- Also, the file interlocks (which are implemented!) will not notice
	  one user opening the original file for writing and another opening
	  a link for writing.

*NEWUSER <username>
	- Create new user.
	- Will also create & set ownership on home directory on disc 0.
	- If home already exists, expect problems.
	- To delete a user, see *PRIV

*PRIV <user> <priv>
	- Set user privilege. Applicable privileges are:
		D - Deleted - user cannot log in, password entry will be reused
		L - Locked user - cannot log in
		N - Unlocked (normal) user, but cannot change password
		S - System user
		U - Unlocked (normal) user
		
*SETHOME (<username>) <directory>
	- Permanently set replacement home directory (effective next login)
	- If <username> omitted, works for the calling user.
	- Otherwise operates on the named user if they exist.
	- <directory> can include a :DISC prefix

*SETLIB (<username>) <directory>
	- See above. System users may specify the optional username.

*UNLINK <link>
	- Removes a symlink created with *LINK

THE END
-------

Enjoy!
